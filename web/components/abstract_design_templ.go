// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.731
package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func AbstractDesign() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div x-data=\"abstractDesign()\" x-init=\"init()\" class=\"relative w-full h-96\"><canvas id=\"tech-canvas\" x-ref=\"canvas\" class=\"w-full h-full\"></canvas></div><script>\n  function abstractDesign() {\n    return {\n      ctx: null,\n      particles: [],\n      animationId: null,\n\n      init() {\n        const canvas = this.$refs.canvas;\n        this.ctx = canvas.getContext('2d');\n\n        // Set canvas size with proper scaling\n        const setCanvasSize = () => {\n          const rect = canvas.getBoundingClientRect();\n          canvas.width = rect.width;\n          canvas.height = rect.height;\n        };\n        setCanvasSize();\n        window.addEventListener('resize', setCanvasSize);\n\n        // Create particles\n        for (let i = 0; i < 30; i++) {\n          this.particles.push({\n            x: Math.random() * canvas.width,\n            y: Math.random() * canvas.height,\n            size: Math.random() * 2 + 1,\n            speedX: (Math.random() - 0.5) * 0.5,\n            speedY: (Math.random() - 0.5) * 0.5\n          });\n        }\n\n        // Start the animation\n        this.animate();\n\n        // Cleanup\n        this.$cleanup = () => {\n          if (this.animationId) {\n            cancelAnimationFrame(this.animationId);\n          }\n          window.removeEventListener('resize', setCanvasSize);\n        };\n      },\n\n      animate() {\n        const canvas = this.$refs.canvas;\n        this.ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n        this.particles.forEach((particle, i) => {\n          // Update position\n          particle.x += particle.speedX;\n          particle.y += particle.speedY;\n\n          // Bounce off walls\n          if (particle.x < 0 || particle.x > canvas.width) particle.speedX *= -1;\n          if (particle.y < 0 || particle.y > canvas.height) particle.speedY *= -1;\n\n          // Draw particle\n          this.ctx.beginPath();\n          this.ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);\n          this.ctx.fillStyle = 'rgba(174, 217, 224, 0.6)';\n          this.ctx.fill();\n\n          // Connect particles within range\n          this.particles.slice(i + 1).forEach(otherParticle => {\n            const dx = particle.x - otherParticle.x;\n            const dy = particle.y - otherParticle.y;\n            const distance = Math.sqrt(dx * dx + dy * dy);\n\n            if (distance < 100) {\n              this.ctx.beginPath();\n              this.ctx.moveTo(particle.x, particle.y);\n              this.ctx.lineTo(otherParticle.x, otherParticle.y);\n              this.ctx.strokeStyle = `rgba(174, 217, 224, ${0.2 - distance / 500})`;\n              this.ctx.stroke();\n            }\n          });\n        });\n\n        // Continue animation\n        this.animationId = requestAnimationFrame(() => this.animate());\n      }\n    }\n  }\n</script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}
