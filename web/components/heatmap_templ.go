// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.731
package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func GitHubHeatmap() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div x-data=\"githubHeatmap()\" x-init=\"generateData()\" class=\"w-full overflow-x-auto\"><div class=\"inline-flex flex-col min-w-full p-4\"><div class=\"flex flex-wrap gap-1\"><template x-for=\"(day, index) in days\" :key=\"index\"><div :class=\"getContributionClass(day.count)\" class=\"w-3 h-3 rounded-sm transition-colors\" :title=\"`${formatDate(day.date)}: ${day.count} contributions`\"></div></template></div><div class=\"flex justify-end items-center mt-2 text-sm text-neutral-500 dark:text-neutral-400\"><span>Less</span><div class=\"flex gap-1 ml-2\"><div class=\"w-3 h-3 rounded-sm bg-neutral-100 dark:bg-neutral-800\"></div><div class=\"w-3 h-3 rounded-sm bg-emerald-100 dark:bg-emerald-900\"></div><div class=\"w-3 h-3 rounded-sm bg-emerald-300 dark:bg-emerald-700\"></div><div class=\"w-3 h-3 rounded-sm bg-emerald-500 dark:bg-emerald-500\"></div></div><span class=\"ml-2\">More</span></div></div></div><script>\n  function githubHeatmap() {\n    return {\n      days: [],\n\n      generateData() {\n        const daysCount = 365;\n        const today = new Date();\n\n        this.days = Array.from({length: daysCount}, (_, i) => ({\n          date: new Date(today - (daysCount - i) * 24 * 60 * 60 * 1000),\n          count: Math.floor(Math.random() * 10)\n        }));\n      },\n\n      formatDate(date) {\n        return new Date(date).toLocaleDateString();\n      },\n\n      getContributionClass(count) {\n        if (count === 0) return 'bg-neutral-100 dark:bg-neutral-800';\n        if (count <= 3) return 'bg-emerald-100 dark:bg-emerald-900';\n        if (count <= 6) return 'bg-emerald-300 dark:bg-emerald-700';\n        return 'bg-emerald-500 dark:bg-emerald-500';\n      }\n    }\n  }\n</script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}
