// web/pages/admin/tags.templ
package admin

import (
"blog-portfolio/internal/models"
"blog-portfolio/web/layouts"
"fmt"
)

type TagListData struct {
Tags []models.Tag
}

templ Tags(data TagListData) {
@layouts.Admin(layouts.PageData{
Title: "Tags | Admin",
Description: "Manage blog tags",
}) {
<div class="px-4 sm:px-6 lg:px-8">
  <div class="sm:flex sm:items-center">
    <div class="sm:flex-auto">
      <h1 class="text-2xl font-semibold text-neutral-900 dark:text-white">Tags</h1>
      <p class="mt-2 text-sm text-neutral-700 dark:text-neutral-300">
        A list of all your blog tags and their usage statistics.
      </p>
    </div>
    <div class="mt-4 sm:mt-0 sm:ml-16 sm:flex-none">
      <button type="button" onclick="window.createTagModal.showModal()"
        class="inline-flex items-center justify-center rounded-md border border-transparent 
                                   bg-primary-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-primary-700 
                                   focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 sm:w-auto">
        Create Tag
      </button>
    </div>
  </div>
  <div class="mt-8 flex flex-col">
    <div class="-my-2 -mx-4 overflow-x-auto sm:-mx-6 lg:-mx-8">
      <div class="inline-block min-w-full py-2 align-middle md:px-6 lg:px-8">
        <div class="overflow-hidden shadow ring-1 ring-black ring-opacity-5 rounded-lg">
          <table class="min-w-full divide-y divide-neutral-300 dark:divide-neutral-700">
            <thead class="bg-neutral-50 dark:bg-neutral-800">
              <tr>
                <th scope="col"
                  class="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-neutral-900 dark:text-white sm:pl-6">
                  Name
                </th>
                <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-neutral-900 dark:text-white">
                  Slug
                </th>
                <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-neutral-900 dark:text-white">
                  Posts
                </th>
                <th scope="col" class="relative py-3.5 pl-3 pr-4 sm:pr-6">
                  <span class="sr-only">Actions</span>
                </th>
              </tr>
            </thead>
            <tbody class="divide-y divide-neutral-200 dark:divide-neutral-700 bg-white dark:bg-neutral-900">
              for _, tag := range data.Tags {
              <tr id={ "tag-" + fmt.Sprint(tag.ID) }>
                <td
                  class="whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-neutral-900 dark:text-white sm:pl-6">
                  { tag.Name }
                </td>
                <td class="whitespace-nowrap px-3 py-4 text-sm text-neutral-500 dark:text-neutral-400">
                  { tag.Slug }
                </td>
                <td class="whitespace-nowrap px-3 py-4 text-sm text-neutral-500 dark:text-neutral-400">
                  { fmt.Sprint(tag.PostCount) }
                </td>
                <td class="relative whitespace-nowrap py-4 pl-3 pr-4 text-right text-sm font-medium sm:pr-6">
                  <div class="flex justify-end gap-2">
                    <button @click={ fmt.Sprintf("editTag(%d, %q)", tag.ID, tag.Name) }
                      class="text-primary-600 hover:text-primary-900 dark:text-primary-400 dark:hover:text-primary-300">
                      Edit
                    </button>
                    <button hx-delete={ fmt.Sprintf("/api/tags/%d", tag.ID) }
                      hx-confirm="Are you sure you want to delete this tag?" hx-target={ fmt.Sprintf("#tag-%d", tag.ID)
                      } hx-swap="outerHTML"
                      class="text-red-600 hover:text-red-900 dark:text-red-400 dark:hover:text-red-300">
                      Delete
                    </button>
                  </div>
                </td>
              </tr>
              }
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>
  // Create Tag Modal
  <dialog id="createTagModal" class="rounded-lg shadow-xl dark:bg-neutral-800">
    <div class="p-6">
      <h3 class="text-lg font-medium text-neutral-900 dark:text-white">Create New Tag</h3>
      <form id="createTagForm" class="mt-4">
        <div>
          <label for="tagName" class="block text-sm font-medium text-neutral-700 dark:text-neutral-300">
            Tag Name
          </label>
          <input type="text" name="name" id="tagName" required class="mt-1 block w-full rounded-md border-neutral-300 dark:border-neutral-700 
                                          shadow-sm focus:border-primary-500 focus:ring-primary-500 sm:text-sm
                                          dark:bg-neutral-700 dark:text-white" />
        </div>
        <div class="mt-4 flex justify-end space-x-2">
          <button type="button" onclick="window.createTagModal.close()" class="px-4 py-2 text-sm font-medium text-neutral-700 dark:text-neutral-300
                                           bg-white dark:bg-neutral-700 border border-neutral-300 dark:border-neutral-600 
                                           rounded-md hover:bg-neutral-50 dark:hover:bg-neutral-600">
            Cancel
          </button>
          <button type="submit" class="px-4 py-2 text-sm font-medium text-white bg-primary-600 
                                           rounded-md hover:bg-primary-700 focus:outline-none focus:ring-2 
                                           focus:ring-offset-2 focus:ring-primary-500">
            Create
          </button>
        </div>
      </form>
    </div>
  </dialog>
  // Edit Tag Modal
  <dialog id="editTagModal" class="rounded-lg shadow-xl dark:bg-neutral-800">
    <div class="p-6">
      <h3 class="text-lg font-medium text-neutral-900 dark:text-white">Edit Tag</h3>
      <form id="editTagForm" class="mt-4">
        <input type="hidden" id="editTagId" />
        <div>
          <label for="editTagName" class="block text-sm font-medium text-neutral-700 dark:text-neutral-300">
            Tag Name
          </label>
          <input type="text" name="name" id="editTagName" required class="mt-1 block w-full rounded-md border-neutral-300 dark:border-neutral-700 
                                          shadow-sm focus:border-primary-500 focus:ring-primary-500 sm:text-sm
                                          dark:bg-neutral-700 dark:text-white" />
        </div>
        <div class="mt-4 flex justify-end space-x-2">
          <button type="button" onclick="window.editTagModal.close()" class="px-4 py-2 text-sm font-medium text-neutral-700 dark:text-neutral-300
                                           bg-white dark:bg-neutral-700 border border-neutral-300 dark:border-neutral-600 
                                           rounded-md hover:bg-neutral-50 dark:hover:bg-neutral-600">
            Cancel
          </button>
          <button type="submit" class="px-4 py-2 text-sm font-medium text-white bg-primary-600 
                                           rounded-md hover:bg-primary-700 focus:outline-none focus:ring-2 
                                           focus:ring-offset-2 focus:ring-primary-500">
            Update
          </button>
        </div>
      </form>
    </div>
  </dialog>
  <script>
    // Handle create tag form submission
    document.getElementById('createTagForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      const form = e.target;
      const name = form.querySelector('#tagName').value;

      try {
        const response = await fetch('/api/tags', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({name}),
        });

        if (!response.ok) throw new Error('Failed to create tag');

        // Refresh the page to show the new tag
        window.location.reload();
      } catch (error) {
        console.error('Error creating tag:', error);
        alert('Failed to create tag. Please try again.');
      }
    });

    // Handle edit tag
    function editTag(id, name) {
      document.getElementById('editTagId').value = id;
      document.getElementById('editTagName').value = name;
      window.editTagModal.showModal();
    }

    // Handle edit tag form submission
    document.getElementById('editTagForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      const form = e.target;
      const id = form.querySelector('#editTagId').value;
      const name = form.querySelector('#editTagName').value;

      try {
        const response = await fetch(`/api/tags/${id}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({name}),
        });

        if (!response.ok) throw new Error('Failed to update tag');

        // Refresh the page to show the updated tag
        window.location.reload();
      } catch (error) {
        console.error('Error updating tag:', error);
        alert('Failed to update tag. Please try again.');
      }
    });
  </script>
</div>
}
}
