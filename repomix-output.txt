This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-29T12:13:00.025Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
cmd/
  server/
    main.go
internal/
  config/
    config.go
    development.json
  database/
    migrations/
      000001_create_posts_table.up.sql
    database.go
    migrations.go
  handlers/
    auth.go
    handlers.go
    post_handlers.go
  logger/
    logger.go
  middleware/
    auth.go
    middleware.go
  models/
    logger/
      logger.go
    post.go
  repository/
    post_repository.go
  router/
    router.go
  service/
    post_service.go
web/
  components/
    footer_templ.go
    footer.templ
    navbar_templ.go
    navbar.templ
    pagination_templ.go
    pagination.templ
    post_templ.go
    post.templ
  layouts/
    admin_templ.go
    admin.templ
    base_templ.go
    base.templ
  pages/
    blog_templ.go
    blog.templ
    home_templ.go
    home.templ
    login_templ.go
    login.templ
  styles/
    input.css
.air.toml
.gitignore
go.mod
go.sum
index.ts
makefile
package.json
README.md
tailwind.config.js
tsconfig.json

================================================================
Repository Files
================================================================

================
File: cmd/server/main.go
================
// cmd/server/main.go
package main

import (
	"blog-portfolio/internal/config"
	"blog-portfolio/internal/database"
	"blog-portfolio/internal/handlers"
	"blog-portfolio/internal/logger"
	"blog-portfolio/internal/repository"
	"blog-portfolio/internal/router"
	"blog-portfolio/internal/service"
	"context"
	"fmt"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"
)

func main() {
	// Initialize logger
	log := logger.New()

	// Load configuration
	env := os.Getenv("ENVIRONMENT")
	if env == "" {
		env = "development"
	}

	cfg, err := config.LoadConfig(env)
	if err != nil {
		log.Error("Failed to load configuration:", err)
		os.Exit(1)
	}

	// Initialize database
	db, err := database.New(log)
	if err != nil {
		log.Error("Failed to initialize database:", err)
		os.Exit(1)
	}
	defer db.Close()

	// Run migrations
	if err := db.RunMigrations(); err != nil {
		log.Error("Failed to run migrations:", err)
		os.Exit(1)
	}

	// Initialize repositories
	postRepo := repository.NewPostRepository(db.DB)

	// Initialize services
	postService := service.NewPostService(postRepo)

	// Initialize handlers
	h := handlers.New(log, postService)

	// Initialize router
	r := router.New(log, cfg, h)

	// Setup HTTP server
	addr := fmt.Sprintf(":%s", cfg.Server.Port)
	server := &http.Server{
		Addr:         addr,
		Handler:      r,
		ReadTimeout:  15 * time.Second,
		WriteTimeout: 15 * time.Second,
		IdleTimeout:  60 * time.Second,
	}

	// Server run context
	serverCtx, serverStopCtx := context.WithCancel(context.Background())

	// Listen for syscall signals for process lifecycle management
	sig := make(chan os.Signal, 1)
	signal.Notify(sig, syscall.SIGHUP, syscall.SIGINT, syscall.SIGTERM, syscall.SIGQUIT)
	go func() {
		<-sig

		// Shutdown signal with grace period of 30 seconds
		shutdownCtx, _ := context.WithTimeout(serverCtx, 30*time.Second)

		go func() {
			<-shutdownCtx.Done()
			if shutdownCtx.Err() == context.DeadlineExceeded {
				log.Error("Graceful shutdown timed out... forcing exit.")
			}
		}()

		// Trigger graceful shutdown
		err := server.Shutdown(shutdownCtx)
		if err != nil {
			log.Error(err)
		}
		serverStopCtx()
	}()

	// Start the server
	log.Info("Server is running on http://localhost" + addr)
	err = server.ListenAndServe()
	if err != nil && err != http.ErrServerClosed {
		log.Error("Server failed to start:", err)
		os.Exit(1)
	}

	// Wait for server context to be stopped
	<-serverCtx.Done()
}

================
File: internal/config/config.go
================
// internal/config/config.go
package config

import (
	"encoding/json"
	"os"
	"path/filepath"
)

type Config struct {
	Server   ServerConfig   `json:"server"`
	Database DatabaseConfig `json:"database"`
	Auth     AuthConfig     `json:"auth"`
	App      AppConfig      `json:"app"`
}

type ServerConfig struct {
	Port         string `json:"port"`
	Environment  string `json:"environment"`
	AllowOrigins string `json:"allow_origins"`
}

type DatabaseConfig struct {
	Driver   string `json:"driver"`
	Host     string `json:"host"`
	Port     string `json:"port"`
	Name     string `json:"name"`
	User     string `json:"user"`
	Password string `json:"password"`
}

type AuthConfig struct {
	Secret string `json:"secret"`
}

type AppConfig struct {
	Title       string `json:"title"`
	Description string `json:"description"`
	BaseURL     string `json:"base_url"`
}

// LoadConfig loads configuration from both JSON and environment variables
func LoadConfig(environment string) (*Config, error) {
	// Default configuration
	config := &Config{
		Server: ServerConfig{
			Port:        "8080",
			Environment: "development",
		},
		App: AppConfig{
			Title:       "My Blog & Portfolio",
			Description: "Personal blog and portfolio website",
			BaseURL:     "http://localhost:8080",
		},
	}

	// Load from config file if exists
	configFile := filepath.Join("config", environment+".json")
	if _, err := os.Stat(configFile); err == nil {
		file, err := os.Open(configFile)
		if err != nil {
			return nil, err
		}
		defer file.Close()

		if err := json.NewDecoder(file).Decode(config); err != nil {
			return nil, err
		}
	}

	// Override with environment variables if they exist
	if port := os.Getenv("PORT"); port != "" {
		config.Server.Port = port
	}
	if env := os.Getenv("ENVIRONMENT"); env != "" {
		config.Server.Environment = env
	}
	if dbURL := os.Getenv("DATABASE_URL"); dbURL != "" {
		// Parse database URL and set config
	}

	return config, nil
}

================
File: internal/config/development.json
================
{
  "server": {
    "port": "8080",
    "environment": "development",
    "allow_origins": "*"
  },
  "app": {
    "title": "My Blog & Portfolio",
    "description": "Personal blog and portfolio website",
    "base_url": "http://localhost:8080"
  }
}

================
File: internal/database/migrations/000001_create_posts_table.up.sql
================
-- migrations/000001_create_posts_table.up.sql
CREATE TABLE IF NOT EXISTS posts (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    title TEXT NOT NULL,
    slug TEXT NOT NULL UNIQUE,
    content TEXT NOT NULL,
    description TEXT,
    cover_image TEXT,
    published BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    published_at TIMESTAMP
);

CREATE INDEX idx_posts_slug ON posts(slug);
CREATE INDEX idx_posts_published ON posts(published);

-- migrations/000001_create_posts_table.down.sql
DROP TABLE IF EXISTS posts;

-- migrations/000002_create_tags_table.up.sql
CREATE TABLE IF NOT EXISTS tags (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL UNIQUE,
    slug TEXT NOT NULL UNIQUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS post_tags (
    post_id INTEGER NOT NULL,
    tag_id INTEGER NOT NULL,
    PRIMARY KEY (post_id, tag_id),
    FOREIGN KEY (post_id) REFERENCES posts(id) ON DELETE CASCADE,
    FOREIGN KEY (tag_id) REFERENCES tags(id) ON DELETE CASCADE
);

CREATE INDEX idx_tags_slug ON tags(slug);

-- migrations/000002_create_tags_table.down.sql
DROP TABLE IF EXISTS post_tags;
DROP TABLE IF EXISTS tags;

================
File: internal/database/database.go
================
// internal/database/database.go
package database

import (
	"blog-portfolio/internal/logger"
	"database/sql"
	"fmt"
	"os"
	"path/filepath"

	_ "github.com/mattn/go-sqlite3"
)

type Database struct {
	*sql.DB
	logger *logger.Logger
}

func New(logger *logger.Logger) (*Database, error) {
	// Ensure database directory exists
	dbDir := "./data"
	if err := os.MkdirAll(dbDir, 0755); err != nil {
		return nil, fmt.Errorf("failed to create database directory: %v", err)
	}

	// Connect to SQLite database
	dbPath := filepath.Join(dbDir, "blog.db")
	db, err := sql.Open("sqlite3", dbPath+"?_foreign_keys=on")
	if err != nil {
		return nil, fmt.Errorf("failed to open database: %v", err)
	}

	// Test the connection
	if err := db.Ping(); err != nil {
		return nil, fmt.Errorf("failed to connect to database: %v", err)
	}

	// Set connection pool settings
	db.SetMaxOpenConns(25)
	db.SetMaxIdleConns(25)

	return &Database{
		DB:     db,
		logger: logger,
	}, nil
}

// Close closes the database connection
func (db *Database) Close() error {
	return db.DB.Close()
}

================
File: internal/database/migrations.go
================
// internal/database/migrations.go
package database

import (
	"database/sql"
	"errors"
	"fmt"
	"os"
	"path/filepath"
)

type Migration struct {
	ID      int
	Name    string
	Content string
}

func (db *Database) RunMigrations() error {
	// Create migrations table if it doesn't exist
	_, err := db.Exec(`
        CREATE TABLE IF NOT EXISTS schema_migrations (
            version INTEGER PRIMARY KEY,
            name TEXT NOT NULL,
            applied_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    `)
	if err != nil {
		return fmt.Errorf("failed to create migrations table: %v", err)
	}

	// Get all migration files
	migrations, err := loadMigrationFiles()
	if err != nil {
		return fmt.Errorf("failed to load migration files: %v", err)
	}

	// Begin transaction
	tx, err := db.Begin()
	if err != nil {
		return fmt.Errorf("failed to begin transaction: %v", err)
	}
	defer tx.Rollback()

	// Run each migration
	for _, migration := range migrations {
		applied, err := isMigrationApplied(tx, migration.ID)
		if err != nil {
			return fmt.Errorf("failed to check migration status: %v", err)
		}

		if !applied {
			db.logger.Info("Applying migration:", migration.Name)

			// Execute migration
			if _, err := tx.Exec(migration.Content); err != nil {
				return fmt.Errorf("failed to apply migration %s: %v", migration.Name, err)
			}

			// Record migration
			if err := recordMigration(tx, migration); err != nil {
				return fmt.Errorf("failed to record migration %s: %v", migration.Name, err)
			}
		}
	}

	// Commit transaction
	if err := tx.Commit(); err != nil {
		return fmt.Errorf("failed to commit migrations: %v", err)
	}

	return nil
}

func loadMigrationFiles() ([]Migration, error) {
	migrationsDir := "./migrations"
	entries, err := os.ReadDir(migrationsDir)
	if err != nil {
		return nil, err
	}

	var migrations []Migration
	for _, entry := range entries {
		if !entry.IsDir() && filepath.Ext(entry.Name()) == ".up.sql" {
			content, err := os.ReadFile(filepath.Join(migrationsDir, entry.Name()))
			if err != nil {
				return nil, err
			}

			// Parse migration ID from filename
			var id int
			_, err = fmt.Sscanf(entry.Name(), "%d_", &id)
			if err != nil {
				return nil, fmt.Errorf("invalid migration filename format: %s", entry.Name())
			}

			migrations = append(migrations, Migration{
				ID:      id,
				Name:    entry.Name(),
				Content: string(content),
			})
		}
	}

	return migrations, nil
}

func isMigrationApplied(tx *sql.Tx, version int) (bool, error) {
	var exists bool
	err := tx.QueryRow("SELECT EXISTS(SELECT 1 FROM schema_migrations WHERE version = ?)", version).Scan(&exists)
	if err != nil {
		return false, err
	}
	return exists, nil
}

func recordMigration(tx *sql.Tx, migration Migration) error {
	_, err := tx.Exec("INSERT INTO schema_migrations (version, name) VALUES (?, ?)",
		migration.ID, migration.Name)
	return err
}

func (db *Database) RollbackMigration() error {
	// Get the last applied migration
	var version int
	var name string
	err := db.QueryRow(`
        SELECT version, name 
        FROM schema_migrations 
        ORDER BY version DESC 
        LIMIT 1
    `).Scan(&version, &name)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return fmt.Errorf("no migrations to rollback")
		}
		return fmt.Errorf("failed to get last migration: %v", err)
	}

	// Read the down migration file
	downFile := fmt.Sprintf("./migrations/%d_%s.down.sql", version, name)
	content, err := os.ReadFile(downFile)
	if err != nil {
		return fmt.Errorf("failed to read down migration: %v", err)
	}

	// Begin transaction
	tx, err := db.Begin()
	if err != nil {
		return fmt.Errorf("failed to begin transaction: %v", err)
	}
	defer tx.Rollback()

	// Execute down migration
	if _, err := tx.Exec(string(content)); err != nil {
		return fmt.Errorf("failed to execute down migration: %v", err)
	}

	// Remove migration record
	if _, err := tx.Exec("DELETE FROM schema_migrations WHERE version = ?", version); err != nil {
		return fmt.Errorf("failed to remove migration record: %v", err)
	}

	// Commit transaction
	if err := tx.Commit(); err != nil {
		return fmt.Errorf("failed to commit rollback: %v", err)
	}

	return nil
}

================
File: internal/handlers/auth.go
================
// internal/handlers/auth.go
package handlers

import (
	"blog-portfolio/internal/logger"
	"blog-portfolio/internal/middleware"
	"blog-portfolio/web/pages"
	"net/http"
	"time"
)

type AuthHandlers struct {
	logger *logger.Logger
}

func NewAuthHandlers(logger *logger.Logger) *AuthHandlers {
	return &AuthHandlers{
		logger: logger,
	}
}

// ShowLogin handles displaying the login page
func (h *AuthHandlers) ShowLogin() http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		err := pages.Login().Render(r.Context(), w)
		if err != nil {
			h.logger.Error("Error rendering login page:", err)
			http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		}
	}
}

// HandleLogin processes the login form
func (h *AuthHandlers) HandleLogin() http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		username := r.FormValue("username")
		password := r.FormValue("password")

		// TODO: Replace with actual user validation from database
		if username == "admin" && password == "admin" {
			// Create token
			token, err := middleware.CreateToken(1, username, "admin")
			if err != nil {
				h.logger.Error("Error creating token:", err)
				http.Error(w, "Internal Server Error", http.StatusInternalServerError)
				return
			}

			// Set cookie
			http.SetCookie(w, &http.Cookie{
				Name:     "session",
				Value:    token,
				Path:     "/",
				Expires:  time.Now().Add(24 * time.Hour),
				HttpOnly: true,
				Secure:   true,
				SameSite: http.SameSiteStrictMode,
			})

			// Redirect to admin dashboard
			http.Redirect(w, r, "/admin/dashboard", http.StatusSeeOther)
			return
		}

		// Return to login page with error
		err := pages.Login().Render(r.Context(), w)
		if err != nil {
			h.logger.Error("Error rendering login page:", err)
			http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		}
	}
}

// HandleLogout logs out the user
func (h *AuthHandlers) HandleLogout() http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		// Clear the session cookie
		http.SetCookie(w, &http.Cookie{
			Name:     "session",
			Value:    "",
			Path:     "/",
			Expires:  time.Now().Add(-1 * time.Hour),
			HttpOnly: true,
			Secure:   true,
			SameSite: http.SameSiteStrictMode,
		})

		// Redirect to login page
		http.Redirect(w, r, "/login", http.StatusSeeOther)
	}
}

================
File: internal/handlers/handlers.go
================
// internal/handlers/handlers.go
package handlers

import (
	"blog-portfolio/internal/logger"
	"blog-portfolio/internal/service"
	"blog-portfolio/web/pages"
	"net/http"
)

type Handlers struct {
	logger *logger.Logger
	posts  *PostHandlers
}

// New creates a new instance of Handlers
func New(logger *logger.Logger, postService *service.PostService) *Handlers {
	return &Handlers{
		logger: logger,
		posts:  NewPostHandlers(postService, logger),
	}
}

// Posts returns the post handlers
func (h *Handlers) Posts() *PostHandlers {
	return h.posts
}

// Home handles the home page
func (h *Handlers) Home() http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		if err := pages.Home().Render(r.Context(), w); err != nil {
			h.logger.Error("Error rendering home page:", err)
			http.Error(w, "Internal Server Error", http.StatusInternalServerError)
		}
	}
}

================
File: internal/handlers/post_handlers.go
================
// internal/handlers/post_handlers.go
package handlers

import (
	"blog-portfolio/internal/logger"
	"blog-portfolio/internal/models"
	"blog-portfolio/internal/service"
	"blog-portfolio/web/pages"
	"encoding/json"
	"net/http"
	"strconv"

	"github.com/go-chi/chi/v5"
)

type PostHandlers struct {
	service *service.PostService
	logger  *logger.Logger
}

func NewPostHandlers(service *service.PostService, logger *logger.Logger) *PostHandlers {
	return &PostHandlers{
		service: service,
		logger:  logger,
	}
}

// ListPosts handles the blog listing page
func (h *PostHandlers) ListPosts() http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()

		// Parse query parameters
		tag := r.URL.Query().Get("tag")
		page, _ := strconv.Atoi(r.URL.Query().Get("page"))
		if page < 1 {
			page = 1
		}

		// Set up pagination
		limit := 10
		offset := (page - 1) * limit
		published := true

		// Create filter
		filter := models.PostFilter{
			Tag:       tag,
			Published: &published,
			Limit:     limit,
			Offset:    offset,
		}

		// Get posts
		posts, err := h.service.ListPosts(ctx, filter)
		if err != nil {
			h.logger.Error("Error listing posts:", err)
			http.Error(w, "Failed to fetch posts", http.StatusInternalServerError)
			return
		}

		// Handle different response types
		switch {
		case r.Header.Get("HX-Request") == "true":
			// HTMX request - return partial template
			err = pages.BlogPostList(posts).Render(ctx, w)
			if err != nil {
				h.logger.Error("Error rendering post list:", err)
				http.Error(w, "Error rendering posts", http.StatusInternalServerError)
			}
		case r.Header.Get("Accept") == "application/json":
			// API request - return JSON
			w.Header().Set("Content-Type", "application/json")
			if err := json.NewEncoder(w).Encode(posts); err != nil {
				h.logger.Error("Error encoding posts:", err)
				http.Error(w, "Error encoding response", http.StatusInternalServerError)
			}
		default:
			// Regular request - return full page
			err = pages.Blog(posts, page, tag).Render(ctx, w)
			if err != nil {
				h.logger.Error("Error rendering blog page:", err)
				http.Error(w, "Error rendering page", http.StatusInternalServerError)
			}
		}
	}
}

// GetPost handles individual blog post pages
func (h *PostHandlers) GetPost() http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		ctx := r.Context()
		slug := chi.URLParam(r, "slug")

		post, err := h.service.GetPost(ctx, slug)
		if err != nil {
			h.logger.Error("Error fetching post:", err)
			http.Error(w, "Failed to fetch post", http.StatusInternalServerError)
			return
		}

		if post == nil {
			http.NotFound(w, r)
			return
		}

		// Handle different response types
		switch {
		case r.Header.Get("Accept") == "application/json":
			w.Header().Set("Content-Type", "application/json")
			if err := json.NewEncoder(w).Encode(post); err != nil {
				h.logger.Error("Error encoding post:", err)
				http.Error(w, "Error encoding response", http.StatusInternalServerError)
			}
		default:
			err = pages.BlogPost(post).Render(ctx, w)
			if err != nil {
				h.logger.Error("Error rendering post page:", err)
				http.Error(w, "Error rendering page", http.StatusInternalServerError)
			}
		}
	}
}

// CreatePost handles blog post creation
func (h *PostHandlers) CreatePost() http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		if r.Method != http.MethodPost {
			http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
			return
		}

		var post models.Post
		if err := json.NewDecoder(r.Body).Decode(&post); err != nil {
			h.logger.Error("Error decoding post:", err)
			http.Error(w, "Invalid request body", http.StatusBadRequest)
			return
		}

		ctx := r.Context()
		if err := h.service.CreatePost(ctx, &post); err != nil {
			h.logger.Error("Error creating post:", err)
			http.Error(w, "Failed to create post", http.StatusInternalServerError)
			return
		}

		w.Header().Set("Content-Type", "application/json")
		w.WriteHeader(http.StatusCreated)
		json.NewEncoder(w).Encode(post)
	}
}

// UpdatePost handles blog post updates
func (h *PostHandlers) UpdatePost() http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		if r.Method != http.MethodPut && r.Method != http.MethodPatch {
			http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
			return
		}

		var post models.Post
		if err := json.NewDecoder(r.Body).Decode(&post); err != nil {
			h.logger.Error("Error decoding post:", err)
			http.Error(w, "Invalid request body", http.StatusBadRequest)
			return
		}

		// Get post ID from URL
		idStr := chi.URLParam(r, "id")
		id, err := strconv.ParseInt(idStr, 10, 64)
		if err != nil {
			http.Error(w, "Invalid post ID", http.StatusBadRequest)
			return
		}
		post.ID = id

		ctx := r.Context()
		if err := h.service.UpdatePost(ctx, &post); err != nil {
			h.logger.Error("Error updating post:", err)
			http.Error(w, "Failed to update post", http.StatusInternalServerError)
			return
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(post)
	}
}

// DeletePost handles blog post deletion
func (h *PostHandlers) DeletePost() http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		if r.Method != http.MethodDelete {
			http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
			return
		}

		// Get post ID from URL
		idStr := chi.URLParam(r, "id")
		id, err := strconv.ParseInt(idStr, 10, 64)
		if err != nil {
			http.Error(w, "Invalid post ID", http.StatusBadRequest)
			return
		}

		ctx := r.Context()
		if err := h.service.DeletePost(ctx, id); err != nil {
			h.logger.Error("Error deleting post:", err)
			http.Error(w, "Failed to delete post", http.StatusInternalServerError)
			return
		}

		w.WriteHeader(http.StatusNoContent)
	}
}

================
File: internal/logger/logger.go
================
// internal/logger/logger.go
package logger

import (
	"log"
	"os"
)

type Logger struct {
	InfoLog  *log.Logger
	ErrorLog *log.Logger
	DebugLog *log.Logger
}

func New() *Logger {
	return &Logger{
		InfoLog:  log.New(os.Stdout, "INFO\t", log.Ldate|log.Ltime),
		ErrorLog: log.New(os.Stderr, "ERROR\t", log.Ldate|log.Ltime|log.Lshortfile),
		DebugLog: log.New(os.Stdout, "DEBUG\t", log.Ldate|log.Ltime|log.Lshortfile),
	}
}

func (l *Logger) Info(v ...interface{}) {
	l.InfoLog.Println(v...)
}

func (l *Logger) Error(v ...interface{}) {
	l.ErrorLog.Println(v...)
}

func (l *Logger) Debug(v ...interface{}) {
	if os.Getenv("DEBUG") == "true" {
		l.DebugLog.Println(v...)
	}
}

================
File: internal/middleware/auth.go
================
// internal/middleware/auth.go
package middleware

import (
	"context"
	"net/http"
	"os"
	"strings"
	"time"

	"github.com/golang-jwt/jwt/v5"
)

type contextKey string

const (
	UserContextKey contextKey = "user"
)

type User struct {
	ID       int64
	Username string
	Role     string
}

// RequireAuth middleware checks for valid authentication
func RequireAuth(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		// Check for session cookie
		cookie, err := r.Cookie("session")
		if err != nil {
			http.Redirect(w, r, "/login", http.StatusSeeOther)
			return
		}

		// Validate JWT token
		token, err := validateToken(cookie.Value)
		if err != nil {
			http.SetCookie(w, &http.Cookie{
				Name:     "session",
				Value:    "",
				Path:     "/",
				Expires:  time.Now().Add(-1 * time.Hour),
				HttpOnly: true,
				Secure:   true,
				SameSite: http.SameSiteStrictMode,
			})
			http.Redirect(w, r, "/login", http.StatusSeeOther)
			return
		}

		// Extract claims
		claims, ok := token.Claims.(jwt.MapClaims)
		if !ok || !token.Valid {
			http.Redirect(w, r, "/login", http.StatusSeeOther)
			return
		}

		// Check if user has admin role
		role, _ := claims["role"].(string)
		if role != "admin" {
			http.Error(w, "Unauthorized", http.StatusUnauthorized)
			return
		}

		// Create user context
		user := &User{
			ID:       int64(claims["user_id"].(float64)),
			Username: claims["username"].(string),
			Role:     role,
		}

		// Add user to context
		ctx := context.WithValue(r.Context(), UserContextKey, user)

		// Call next handler with updated context
		next.ServeHTTP(w, r.WithContext(ctx))
	})
}

// validateToken validates the JWT token
func validateToken(tokenString string) (*jwt.Token, error) {
	// Remove "Bearer " prefix if present
	tokenString = strings.TrimPrefix(tokenString, "Bearer ")

	// Parse the token
	return jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) {
		// Validate signing method
		if _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok {
			return nil, jwt.ErrSignatureInvalid
		}

		// Get secret key from environment
		secret := os.Getenv("JWT_SECRET")
		if secret == "" {
			secret = "your-secret-key" // Default for development
		}

		return []byte(secret), nil
	})
}

// CreateToken creates a new JWT token for a user
func CreateToken(userID int64, username, role string) (string, error) {
	// Get secret key from environment
	secret := os.Getenv("JWT_SECRET")
	if secret == "" {
		secret = "your-secret-key" // Default for development
	}

	// Create claims
	claims := jwt.MapClaims{
		"user_id":  userID,
		"username": username,
		"role":     role,
		"exp":      time.Now().Add(24 * time.Hour).Unix(),
	}

	// Create token
	token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)

	// Sign and return token
	return token.SignedString([]byte(secret))
}

// GetUserFromContext retrieves the user from the context
func GetUserFromContext(ctx context.Context) *User {
	user, ok := ctx.Value(UserContextKey).(*User)
	if !ok {
		return nil
	}
	return user
}

================
File: internal/middleware/middleware.go
================
// internal/middleware/middleware.go
package middleware

import (
	"blog-portfolio/internal/logger"
	"net/http"
	"time"
)

type Middleware struct {
	logger *logger.Logger
}

func New(logger *logger.Logger) *Middleware {
	return &Middleware{
		logger: logger,
	}
}

// RequestLogger logs each request
func (m *Middleware) RequestLogger(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		start := time.Now()

		// Call the next handler
		next.ServeHTTP(w, r)

		// Log the request
		m.logger.Info(
			"Method:", r.Method,
			"Path:", r.URL.Path,
			"Duration:", time.Since(start),
		)
	})
}

// Recover middleware handles panics
func (m *Middleware) Recover(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		defer func() {
			if err := recover(); err != nil {
				m.logger.Error("Recovered from panic:", err)
				http.Error(w, "Internal Server Error", http.StatusInternalServerError)
			}
		}()

		next.ServeHTTP(w, r)
	})
}

================
File: internal/models/logger/logger.go
================
// internal/logger/logger.go
package logger

import (
	"log"
	"os"
)

type Logger struct {
	InfoLog  *log.Logger
	ErrorLog *log.Logger
	DebugLog *log.Logger
}

func New() *Logger {
	return &Logger{
		InfoLog:  log.New(os.Stdout, "INFO\t", log.Ldate|log.Ltime),
		ErrorLog: log.New(os.Stderr, "ERROR\t", log.Ldate|log.Ltime|log.Lshortfile),
		DebugLog: log.New(os.Stdout, "DEBUG\t", log.Ldate|log.Ltime|log.Lshortfile),
	}
}

func (l *Logger) Info(v ...interface{}) {
	l.InfoLog.Println(v...)
}

func (l *Logger) Error(v ...interface{}) {
	l.ErrorLog.Println(v...)
}

func (l *Logger) Debug(v ...interface{}) {
	if os.Getenv("DEBUG") == "true" {
		l.DebugLog.Println(v...)
	}
}

================
File: internal/models/post.go
================
// internal/models/post.go
package models

import (
	"time"
)

type Post struct {
	ID          int64      `json:"id"`
	Title       string     `json:"title"`
	Slug        string     `json:"slug"`
	Content     string     `json:"content"`
	Description string     `json:"description"`
	CoverImage  string     `json:"cover_image"`
	Published   bool       `json:"published"`
	CreatedAt   time.Time  `json:"created_at"`
	UpdatedAt   time.Time  `json:"updated_at"`
	PublishedAt *time.Time `json:"published_at,omitempty"`
	Tags        []Tag      `json:"tags,omitempty"`
}

type Tag struct {
	ID        int64     `json:"id"`
	Name      string    `json:"name"`
	Slug      string    `json:"slug"`
	CreatedAt time.Time `json:"created_at"`
}

// PostFilter represents filters for querying posts
type PostFilter struct {
	Tag       string
	Published *bool
	Limit     int
	Offset    int
}

================
File: internal/repository/post_repository.go
================
// internal/repository/post_repository.go
package repository

import (
	"blog-portfolio/internal/models"
	"context"
	"database/sql"
	"errors"
	"strings"
)

type PostRepository struct {
	db *sql.DB
}

func NewPostRepository(db *sql.DB) *PostRepository {
	return &PostRepository{db: db}
}

// CreatePost creates a new blog post
func (r *PostRepository) CreatePost(ctx context.Context, post *models.Post) error {
	tx, err := r.db.BeginTx(ctx, nil)
	if err != nil {
		return err
	}
	defer tx.Rollback()

	// Insert post
	query := `
        INSERT INTO posts (title, slug, content, description, cover_image, published, published_at)
        VALUES (?, ?, ?, ?, ?, ?, ?)
        RETURNING id, created_at, updated_at`

	var publishedAt sql.NullTime
	if post.PublishedAt != nil {
		publishedAt.Time = *post.PublishedAt
		publishedAt.Valid = true
	}

	err = tx.QueryRowContext(
		ctx,
		query,
		post.Title,
		post.Slug,
		post.Content,
		post.Description,
		post.CoverImage,
		post.Published,
		publishedAt,
	).Scan(&post.ID, &post.CreatedAt, &post.UpdatedAt)
	if err != nil {
		return err
	}

	// Insert tags if any
	if len(post.Tags) > 0 {
		for _, tag := range post.Tags {
			// Insert tag if it doesn't exist
			var tagID int64
			err = tx.QueryRowContext(
				ctx,
				`INSERT INTO tags (name, slug) 
                 VALUES (?, ?) 
                 ON CONFLICT(slug) DO UPDATE SET name=excluded.name 
                 RETURNING id`,
				tag.Name,
				tag.Slug,
			).Scan(&tagID)
			if err != nil {
				return err
			}

			// Create post-tag association
			_, err = tx.ExecContext(
				ctx,
				"INSERT INTO post_tags (post_id, tag_id) VALUES (?, ?)",
				post.ID,
				tagID,
			)
			if err != nil {
				return err
			}
		}
	}

	return tx.Commit()
}

// GetPost retrieves a post by its slug
func (r *PostRepository) GetPost(ctx context.Context, slug string) (*models.Post, error) {
	post := &models.Post{}
	query := `
        SELECT 
            p.id, p.title, p.slug, p.content, p.description, 
            p.cover_image, p.published, p.created_at, p.updated_at, 
            p.published_at 
        FROM posts p 
        WHERE p.slug = ?`

	var publishedAt sql.NullTime
	err := r.db.QueryRowContext(ctx, query, slug).Scan(
		&post.ID,
		&post.Title,
		&post.Slug,
		&post.Content,
		&post.Description,
		&post.CoverImage,
		&post.Published,
		&post.CreatedAt,
		&post.UpdatedAt,
		&publishedAt,
	)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, nil
		}
		return nil, err
	}

	if publishedAt.Valid {
		post.PublishedAt = &publishedAt.Time
	}

	// Get tags
	post.Tags, err = r.getPostTags(ctx, post.ID)
	if err != nil {
		return nil, err
	}

	return post, nil
}

// ListPosts returns a list of posts based on the filter
func (r *PostRepository) ListPosts(ctx context.Context, filter models.PostFilter) ([]*models.Post, error) {
	query := strings.Builder{}
	query.WriteString(`
        SELECT DISTINCT
            p.id, p.title, p.slug, p.description, 
            p.cover_image, p.published, p.created_at, 
            p.updated_at, p.published_at
        FROM posts p`)

	args := []interface{}{}
	where := []string{}

	if filter.Tag != "" {
		query.WriteString(` 
            LEFT JOIN post_tags pt ON p.id = pt.post_id 
            LEFT JOIN tags t ON pt.tag_id = t.id`)
		where = append(where, "t.slug = ?")
		args = append(args, filter.Tag)
	}

	if filter.Published != nil {
		where = append(where, "p.published = ?")
		args = append(args, *filter.Published)
	}

	if len(where) > 0 {
		query.WriteString(" WHERE " + strings.Join(where, " AND "))
	}

	query.WriteString(" ORDER BY p.created_at DESC")

	if filter.Limit > 0 {
		query.WriteString(" LIMIT ?")
		args = append(args, filter.Limit)
	}
	if filter.Offset > 0 {
		query.WriteString(" OFFSET ?")
		args = append(args, filter.Offset)
	}

	rows, err := r.db.QueryContext(ctx, query.String(), args...)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var posts []*models.Post
	for rows.Next() {
		post := &models.Post{}
		var publishedAt sql.NullTime
		err := rows.Scan(
			&post.ID,
			&post.Title,
			&post.Slug,
			&post.Description,
			&post.CoverImage,
			&post.Published,
			&post.CreatedAt,
			&post.UpdatedAt,
			&publishedAt,
		)
		if err != nil {
			return nil, err
		}

		if publishedAt.Valid {
			post.PublishedAt = &publishedAt.Time
		}

		// Get tags for each post
		post.Tags, err = r.getPostTags(ctx, post.ID)
		if err != nil {
			return nil, err
		}

		posts = append(posts, post)
	}

	return posts, nil
}

// UpdatePost updates an existing post
func (r *PostRepository) UpdatePost(ctx context.Context, post *models.Post) error {
	tx, err := r.db.BeginTx(ctx, nil)
	if err != nil {
		return err
	}
	defer tx.Rollback()

	// Update post
	query := `
        UPDATE posts 
        SET title = ?, content = ?, description = ?, 
            cover_image = ?, published = ?, published_at = ?,
            updated_at = CURRENT_TIMESTAMP
        WHERE id = ?`

	var publishedAt sql.NullTime
	if post.PublishedAt != nil {
		publishedAt.Time = *post.PublishedAt
		publishedAt.Valid = true
	}

	result, err := tx.ExecContext(
		ctx,
		query,
		post.Title,
		post.Content,
		post.Description,
		post.CoverImage,
		post.Published,
		publishedAt,
		post.ID,
	)
	if err != nil {
		return err
	}

	rows, err := result.RowsAffected()
	if err != nil {
		return err
	}
	if rows == 0 {
		return sql.ErrNoRows
	}

	// Update tags
	_, err = tx.ExecContext(ctx, "DELETE FROM post_tags WHERE post_id = ?", post.ID)
	if err != nil {
		return err
	}

	for _, tag := range post.Tags {
		var tagID int64
		err = tx.QueryRowContext(
			ctx,
			`INSERT INTO tags (name, slug) 
             VALUES (?, ?) 
             ON CONFLICT(slug) DO UPDATE SET name=excluded.name 
             RETURNING id`,
			tag.Name,
			tag.Slug,
		).Scan(&tagID)
		if err != nil {
			return err
		}

		_, err = tx.ExecContext(
			ctx,
			"INSERT INTO post_tags (post_id, tag_id) VALUES (?, ?)",
			post.ID,
			tagID,
		)
		if err != nil {
			return err
		}
	}

	return tx.Commit()
}

// DeletePost deletes a post by ID
func (r *PostRepository) DeletePost(ctx context.Context, id int64) error {
	result, err := r.db.ExecContext(ctx, "DELETE FROM posts WHERE id = ?", id)
	if err != nil {
		return err
	}

	rows, err := result.RowsAffected()
	if err != nil {
		return err
	}
	if rows == 0 {
		return sql.ErrNoRows
	}

	return nil
}

// getPostTags retrieves all tags for a given post
func (r *PostRepository) getPostTags(ctx context.Context, postID int64) ([]models.Tag, error) {
	rows, err := r.db.QueryContext(ctx, `
        SELECT t.id, t.name, t.slug, t.created_at
        FROM tags t
        JOIN post_tags pt ON t.id = pt.tag_id
        WHERE pt.post_id = ?
        ORDER BY t.name`,
		postID,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var tags []models.Tag
	for rows.Next() {
		var tag models.Tag
		err := rows.Scan(&tag.ID, &tag.Name, &tag.Slug, &tag.CreatedAt)
		if err != nil {
			return nil, err
		}
		tags = append(tags, tag)
	}

	return tags, nil
}

================
File: internal/router/router.go
================
// internal/router/router.go
package router

import (
	"blog-portfolio/internal/config"
	"blog-portfolio/internal/handlers"
	"blog-portfolio/internal/logger"
	custommw "blog-portfolio/internal/middleware"
	"net/http"
	"time"

	"github.com/go-chi/chi/v5"
	chimw "github.com/go-chi/chi/v5/middleware"
	"github.com/go-chi/cors"
)

type Router struct {
	chi.Router
	logger   *logger.Logger
	config   *config.Config
	handlers *handlers.Handlers
}

func New(logger *logger.Logger, config *config.Config, handlers *handlers.Handlers) *Router {
	r := chi.NewRouter()

	// Create custom middleware
	m := custommw.New(logger)

	// Basic middleware
	r.Use(m.RequestLogger)
	r.Use(m.Recover)
	r.Use(chimw.RealIP)
	r.Use(chimw.Timeout(60 * time.Second))

	// CORS middleware
	r.Use(cors.Handler(cors.Options{
		AllowedOrigins:   []string{config.Server.AllowOrigins},
		AllowedMethods:   []string{"GET", "POST", "PUT", "DELETE", "OPTIONS"},
		AllowedHeaders:   []string{"Accept", "Authorization", "Content-Type", "X-CSRF-Token"},
		ExposedHeaders:   []string{"Link"},
		AllowCredentials: true,
		MaxAge:           300,
	}))

	router := &Router{
		Router:   r,
		logger:   logger,
		config:   config,
		handlers: handlers,
	}

	// Setup routes
	router.setupRoutes()

	return router
}

// setupRoutes configures all application routes
func (router *Router) setupRoutes() {
	r := router.Router

	// Serve static files
	r.Handle("/static/*", http.StripPrefix("/static/", http.FileServer(http.Dir("web/static"))))

	// Health check
	r.Get("/health", func(w http.ResponseWriter, r *http.Request) {
		w.Write([]byte("OK"))
	})

	// API routes
	r.Route("/api", func(r chi.Router) {
		// Add API routes here
	})

	// Web routes
	r.Group(func(r chi.Router) {
		r.Get("/", router.handlers.Home())

		// Blog routes
		r.Route("/blog", func(r chi.Router) {
			r.Get("/", router.handlers.Posts().ListPosts())
			r.Get("/{slug}", router.handlers.Posts().GetPost())
		})

		// Portfolio routes
		r.Route("/portfolio", func(r chi.Router) {
			r.Get("/", func(w http.ResponseWriter, r *http.Request) {
				w.Write([]byte("Portfolio items will be listed here"))
			})
			r.Get("/{id}", func(w http.ResponseWriter, r *http.Request) {
				id := chi.URLParam(r, "id")
				w.Write([]byte("Portfolio item: " + id))
			})
		})

		// Admin routes
		r.Route("/admin", func(r chi.Router) {
			// Add authentication middleware
			r.Use(custommw.RequireAuth)

			// Dashboard

			// Posts management
			r.Route("/posts", func(r chi.Router) {
				// API endpoints for post management
				r.Post("/", router.handlers.Posts().CreatePost())
				r.Put("/{id}", router.handlers.Posts().UpdatePost())
				r.Delete("/{id}", router.handlers.Posts().DeletePost())
			})
		})
	})
}

================
File: internal/service/post_service.go
================
// internal/service/post_service.go
package service

import (
	"blog-portfolio/internal/models"
	"blog-portfolio/internal/repository"
	"context"
	"strings"
	"time"
)

type PostService struct {
	repo *repository.PostRepository
}

func NewPostService(repo *repository.PostRepository) *PostService {
	return &PostService{repo: repo}
}

// CreatePost creates a new blog post
func (s *PostService) CreatePost(ctx context.Context, post *models.Post) error {
	// Generate slug if not provided
	if post.Slug == "" {
		post.Slug = generateSlug(post.Title)
	}

	// Set published time if post is published
	if post.Published && post.PublishedAt == nil {
		now := time.Now()
		post.PublishedAt = &now
	}

	return s.repo.CreatePost(ctx, post)
}

// GetPost retrieves a post by its slug
func (s *PostService) GetPost(ctx context.Context, slug string) (*models.Post, error) {
	return s.repo.GetPost(ctx, slug)
}

// ListPosts returns a list of posts based on the filter
func (s *PostService) ListPosts(ctx context.Context, filter models.PostFilter) ([]*models.Post, error) {
	return s.repo.ListPosts(ctx, filter)
}

// UpdatePost updates an existing post
func (s *PostService) UpdatePost(ctx context.Context, post *models.Post) error {
	// Update published time if post is being published
	if post.Published && post.PublishedAt == nil {
		now := time.Now()
		post.PublishedAt = &now
	}

	return s.repo.UpdatePost(ctx, post)
}

// DeletePost deletes a post by ID
func (s *PostService) DeletePost(ctx context.Context, id int64) error {
	return s.repo.DeletePost(ctx, id)
}

// Helper function to generate URL-friendly slugs
func generateSlug(title string) string {
	// Convert to lowercase
	slug := strings.ToLower(title)

	// Replace spaces with hyphens
	slug = strings.ReplaceAll(slug, " ", "-")

	// Remove special characters
	slug = strings.Map(func(r rune) rune {
		if (r >= 'a' && r <= 'z') || (r >= '0' && r <= '9') || r == '-' {
			return r
		}
		return -1
	}, slug)

	// Remove multiple consecutive hyphens
	for strings.Contains(slug, "--") {
		slug = strings.ReplaceAll(slug, "--", "-")
	}

	// Trim hyphens from start and end
	slug = strings.Trim(slug, "-")

	return slug
}

================
File: web/components/footer_templ.go
================
// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.731
// web/components/footer.templ

package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func Footer() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<footer class=\"bg-white dark:bg-neutral-800 border-t border-neutral-200 dark:border-neutral-700\"><div class=\"container mx-auto px-4 py-8\"><div class=\"flex flex-col items-center justify-center space-y-4\"><div class=\"flex space-x-6\"><a href=\"https://github.com\" class=\"text-neutral-500 dark:text-neutral-400 hover:text-neutral-900 dark:hover:text-white\">GitHub</a> <a href=\"https://twitter.com\" class=\"text-neutral-500 dark:text-neutral-400 hover:text-neutral-900 dark:hover:text-white\">Twitter</a> <a href=\"https://linkedin.com\" class=\"text-neutral-500 dark:text-neutral-400 hover:text-neutral-900 dark:hover:text-white\">LinkedIn</a></div><p class=\"text-neutral-500 dark:text-neutral-400 text-sm\">© 2024 Your Name. All rights reserved.</p></div></div></footer>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

================
File: web/components/footer.templ
================
// web/components/footer.templ
package components

templ Footer() {
<footer class="bg-white dark:bg-neutral-800 border-t border-neutral-200 dark:border-neutral-700">
  <div class="container mx-auto px-4 py-8">
    <div class="flex flex-col items-center justify-center space-y-4">
      <div class="flex space-x-6">
        <a href="https://github.com"
          class="text-neutral-500 dark:text-neutral-400 hover:text-neutral-900 dark:hover:text-white">
          GitHub
        </a>
        <a href="https://twitter.com"
          class="text-neutral-500 dark:text-neutral-400 hover:text-neutral-900 dark:hover:text-white">
          Twitter
        </a>
        <a href="https://linkedin.com"
          class="text-neutral-500 dark:text-neutral-400 hover:text-neutral-900 dark:hover:text-white">
          LinkedIn
        </a>
      </div>
      <p class="text-neutral-500 dark:text-neutral-400 text-sm">
        © 2024 Your Name. All rights reserved.
      </p>
    </div>
  </div>
</footer>
}

================
File: web/components/navbar_templ.go
================
// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.731
// web/components/navbar.templ

package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func Navbar() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<nav class=\"bg-white dark:bg-neutral-800 border-b border-neutral-200 dark:border-neutral-700\"><div class=\"container mx-auto px-4\"><div class=\"flex justify-between h-16\"><div class=\"flex\"><div class=\"flex-shrink-0 flex items-center\"><a href=\"/\" class=\"text-xl font-bold text-neutral-900 dark:text-white font-mono\">Blog & Portfolio</a></div><div class=\"hidden sm:ml-6 sm:flex sm:space-x-8\"><a href=\"/\" class=\"inline-flex items-center px-1 pt-1 text-sm font-medium text-neutral-900 dark:text-white\">Home</a> <a href=\"/blog\" class=\"inline-flex items-center px-1 pt-1 text-sm font-medium text-neutral-500 dark:text-neutral-400 hover:text-neutral-900 dark:hover:text-white\">Blog</a> <a href=\"/portfolio\" class=\"inline-flex items-center px-1 pt-1 text-sm font-medium text-neutral-500 dark:text-neutral-400 hover:text-neutral-900 dark:hover:text-white\">Portfolio</a></div></div><div class=\"flex items-center\"><button type=\"button\" x-data=\"{ darkMode: localStorage.theme === &#39;dark&#39; }\" @click=\"darkMode = !darkMode; localStorage.theme = darkMode ? &#39;dark&#39; : &#39;light&#39;; document.documentElement.classList.toggle(&#39;dark&#39;)\" class=\"p-2 text-neutral-500 dark:text-neutral-400 hover:text-neutral-900 dark:hover:text-white\"><span x-show=\"!darkMode\" class=\"w-5 h-5\">🌙</span> <span x-show=\"darkMode\" class=\"w-5 h-5\">☀️</span></button></div></div></div></nav>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

================
File: web/components/navbar.templ
================
// web/components/navbar.templ
package components

templ Navbar() {
<nav class="bg-white dark:bg-neutral-800 border-b border-neutral-200 dark:border-neutral-700">
  <div class="container mx-auto px-4">
    <div class="flex justify-between h-16">
      <div class="flex">
        <div class="flex-shrink-0 flex items-center">
          <a href="/" class="text-xl font-bold text-neutral-900 dark:text-white font-mono">
            Blog & Portfolio
          </a>
        </div>
        <div class="hidden sm:ml-6 sm:flex sm:space-x-8">
          <a href="/" class="inline-flex items-center px-1 pt-1 text-sm font-medium text-neutral-900 dark:text-white">
            Home
          </a>
          <a href="/blog"
            class="inline-flex items-center px-1 pt-1 text-sm font-medium text-neutral-500 dark:text-neutral-400 hover:text-neutral-900 dark:hover:text-white">
            Blog
          </a>
          <a href="/portfolio"
            class="inline-flex items-center px-1 pt-1 text-sm font-medium text-neutral-500 dark:text-neutral-400 hover:text-neutral-900 dark:hover:text-white">
            Portfolio
          </a>
        </div>
      </div>
      <div class="flex items-center">
        <button type="button" x-data="{ darkMode: localStorage.theme === 'dark' }"
          @click="darkMode = !darkMode; localStorage.theme = darkMode ? 'dark' : 'light'; document.documentElement.classList.toggle('dark')"
          class="p-2 text-neutral-500 dark:text-neutral-400 hover:text-neutral-900 dark:hover:text-white">
          <span x-show="!darkMode" class="w-5 h-5">🌙</span>
          <span x-show="darkMode" class="w-5 h-5">☀️</span>
        </button>
      </div>
    </div>
  </div>
</nav>
}

================
File: web/components/pagination_templ.go
================
// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.731
// web/components/pagination.templ

package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func Pagination(currentPage int, hasMore bool) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<nav class=\"flex items-center justify-between mt-8 border-t border-neutral-200 dark:border-neutral-700 pt-6\"><div class=\"flex-1 flex justify-between\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if currentPage > 1 {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<a href=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var2 templ.SafeURL = templ.SafeURL("?page=" + string(currentPage-1))
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(string(templ_7745c5c3_Var2)))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\" class=\" relative inline-flex items-center px-4 py-2 border border-neutral-300 dark:border-neutral-600 text-sm\n      font-medium rounded-md text-neutral-700 dark:text-neutral-300 bg-white dark:bg-neutral-800 hover:bg-neutral-50\n      dark:hover:bg-neutral-700\" hx-get=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var3 string
			templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs("/blog?page=" + string(currentPage-1))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `web/components/pagination.templ`, Line: 11, Col: 79}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\" hx-target=\"#post-list\" hx-swap=\"innerHTML\">Previous</a> ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		} else {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		if hasMore {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<a href=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var4 templ.SafeURL = templ.SafeURL("?page=" + string(currentPage+1))
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(string(templ_7745c5c3_Var4)))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\" class=\" ml-3 relative inline-flex items-center px-4 py-2 border border-neutral-300 dark:border-neutral-600 text-sm\n      font-medium rounded-md text-neutral-700 dark:text-neutral-300 bg-white dark:bg-neutral-800 hover:bg-neutral-50\n      dark:hover:bg-neutral-700\" hx-get=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var5 string
			templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs("/blog?page=" + string(currentPage+1))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `web/components/pagination.templ`, Line: 22, Col: 79}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\" hx-target=\"#post-list\" hx-swap=\"innerHTML\">Next</a>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		} else {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</div></nav>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

================
File: web/components/pagination.templ
================
// web/components/pagination.templ
package components

templ Pagination(currentPage int, hasMore bool) {
<nav class="flex items-center justify-between mt-8 border-t border-neutral-200 dark:border-neutral-700 pt-6">
  <div class="flex-1 flex justify-between">
    if currentPage > 1 {
    <a href={ templ.SafeURL("?page=" + string(currentPage-1)) }
					class=" relative inline-flex items-center px-4 py-2 border border-neutral-300 dark:border-neutral-600 text-sm
      font-medium rounded-md text-neutral-700 dark:text-neutral-300 bg-white dark:bg-neutral-800 hover:bg-neutral-50
      dark:hover:bg-neutral-700" hx-get={ "/blog?page=" + string(currentPage-1) } hx-target="#post-list"
      hx-swap="innerHTML">
      Previous
    </a>
    } else {
    <div></div>
    }
    if hasMore {
    <a href={ templ.SafeURL("?page=" + string(currentPage+1)) }
					class=" ml-3 relative inline-flex items-center px-4 py-2 border border-neutral-300 dark:border-neutral-600 text-sm
      font-medium rounded-md text-neutral-700 dark:text-neutral-300 bg-white dark:bg-neutral-800 hover:bg-neutral-50
      dark:hover:bg-neutral-700" hx-get={ "/blog?page=" + string(currentPage+1) } hx-target="#post-list"
      hx-swap="innerHTML">
      Next
    </a>
    } else {
    <div></div>
    }
  </div>
</nav>
}

================
File: web/components/post_templ.go
================
// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.731
// web/components/post.templ

package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import "blog-portfolio/internal/models"

func PostPreview(post *models.Post) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<article class=\"bg-white dark:bg-neutral-800 rounded-lg shadow-sm p-6\"><header class=\"mb-4\"><div class=\"flex items-center justify-between\"><time datetime=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 string
		templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(post.PublishedAt.Format("2006-01-02"))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `web/components/post.templ`, Line: 10, Col: 60}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\" class=\"text-sm text-neutral-600 dark:text-neutral-400\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var3 string
		templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(post.PublishedAt.Format("January 2, 2006"))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `web/components/post.templ`, Line: 11, Col: 52}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</time> ")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if len(post.Tags) > 0 {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"flex flex-wrap gap-2\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			for _, tag := range post.Tags {
				templ_7745c5c3_Err = Tag(tag).Render(ctx, templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</div><h2 class=\"mt-2 text-2xl font-bold text-neutral-900 dark:text-white\"><a href=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var4 templ.SafeURL = templ.SafeURL("/blog/" + post.Slug)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(string(templ_7745c5c3_Var4)))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\" class=\"hover:text-primary-600 dark:hover:text-primary-400\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var5 string
		templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs(post.Title)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `web/components/post.templ`, Line: 23, Col: 20}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</a></h2></header><p class=\"text-neutral-600 dark:text-neutral-400 mb-4\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var6 string
		templ_7745c5c3_Var6, templ_7745c5c3_Err = templ.JoinStringErrs(post.Description)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `web/components/post.templ`, Line: 28, Col: 22}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var6))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</p><footer><a href=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var7 templ.SafeURL = templ.SafeURL("/blog/" + post.Slug)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(string(templ_7745c5c3_Var7)))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\" class=\"text-primary-600 dark:text-primary-400 hover:text-primary-800 dark:hover:text-primary-200 font-medium\">Read more →</a></footer></article>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

func Tag(tag models.Tag) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var8 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var8 == nil {
			templ_7745c5c3_Var8 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<a href=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var9 templ.SafeURL = templ.SafeURL("/blog?tag=" + tag.Slug)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(string(templ_7745c5c3_Var9)))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\" class=\" inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-primary-100 text-primary-800\n  dark:bg-primary-800 dark:text-primary-100 hover:bg-primary-200 dark:hover:bg-primary-700 transition-colors\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var10 string
		templ_7745c5c3_Var10, templ_7745c5c3_Err = templ.JoinStringErrs(tag.Name)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `web/components/post.templ`, Line: 43, Col: 12}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var10))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</a>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

================
File: web/components/post.templ
================
// web/components/post.templ
package components

import "blog-portfolio/internal/models"

templ PostPreview(post *models.Post) {
<article class="bg-white dark:bg-neutral-800 rounded-lg shadow-sm p-6">
  <header class="mb-4">
    <div class="flex items-center justify-between">
      <time datetime={ post.PublishedAt.Format("2006-01-02") } class="text-sm text-neutral-600 dark:text-neutral-400">
        { post.PublishedAt.Format("January 2, 2006") }
      </time>
      if len(post.Tags) > 0 {
      <div class="flex flex-wrap gap-2">
        for _, tag := range post.Tags {
        @Tag(tag)
        }
      </div>
      }
    </div>
    <h2 class="mt-2 text-2xl font-bold text-neutral-900 dark:text-white">
      <a href={ templ.SafeURL("/blog/" + post.Slug) } class="hover:text-primary-600 dark:hover:text-primary-400">
        { post.Title }
      </a>
    </h2>
  </header>
  <p class="text-neutral-600 dark:text-neutral-400 mb-4">
    { post.Description }
  </p>
  <footer>
    <a href={ templ.SafeURL("/blog/" + post.Slug) }
      class="text-primary-600 dark:text-primary-400 hover:text-primary-800 dark:hover:text-primary-200 font-medium">
      Read more →
    </a>
  </footer>
</article>
}

templ Tag(tag models.Tag) {
<a href={ templ.SafeURL("/blog?tag=" + tag.Slug) }
		class=" inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-primary-100 text-primary-800
  dark:bg-primary-800 dark:text-primary-100 hover:bg-primary-200 dark:hover:bg-primary-700 transition-colors">
  { tag.Name }
</a>
}

================
File: web/layouts/admin_templ.go
================
// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.731
// web/layouts/admin.templ

package layouts

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func Admin(data PageData) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<!doctype html><html lang=\"en\" class=\"h-full\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 string
		templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(data.Title)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `web/layouts/admin.templ`, Line: 11, Col: 21}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</title><meta name=\"description\" content=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var3 string
		templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(data.Description)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `web/layouts/admin.templ`, Line: 12, Col: 53}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\"><link rel=\"stylesheet\" href=\"/static/css/main.css\"><link href=\"https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400;500;600;700&amp;display=swap\" rel=\"stylesheet\"><script src=\"https://unpkg.com/htmx.org@1.9.10\"></script><script defer src=\"https://unpkg.com/alpinejs@3.13.5/dist/cdn.min.js\"></script></head><body class=\"h-full bg-neutral-50 dark:bg-neutral-900\"><div x-data=\"{ sidebarOpen: false }\" class=\"min-h-full\"><div x-show=\"sidebarOpen\" class=\"fixed inset-0 bg-neutral-600 bg-opacity-75 z-20\" x-transition:enter=\"transition-opacity ease-linear duration-300\" x-transition:enter-start=\"opacity-0\" x-transition:enter-end=\"opacity-100\" x-transition:leave=\"transition-opacity ease-linear duration-300\" x-transition:leave-start=\"opacity-100\" x-transition:leave-end=\"opacity-0\" @click=\"sidebarOpen = false\"></div><nav class=\"fixed top-0 left-0 bottom-0 flex flex-col w-64 bg-neutral-800 transform transition-transform duration-300 z-30\" :class=\"sidebarOpen ? &#39;translate-x-0&#39; : &#39;-translate-x-full md:translate-x-0&#39;\"><div class=\"flex items-center justify-between h-16 px-4 bg-neutral-900\"><span class=\"text-xl font-bold text-white\">Admin Panel</span> <button @click=\"sidebarOpen = false\" class=\"md:hidden text-neutral-400 hover:text-white\"><span class=\"sr-only\">Close sidebar</span> <svg class=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 18L18 6M6 6l12 12\"></path></svg></button></div><div class=\"flex-1 overflow-y-auto\"><nav class=\"px-2 py-4 space-y-1\"><a href=\"/admin/dashboard\" class=\"flex items-center px-4 py-2 text-sm font-medium rounded-md text-white bg-neutral-900 group\"><svg class=\"mr-3 h-6 w-6 text-neutral-300\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6\"></path></svg> Dashboard</a> <a href=\"/admin/posts\" class=\"flex items-center px-4 py-2 text-sm font-medium rounded-md text-neutral-300 hover:bg-neutral-700 hover:text-white group\"><svg class=\"mr-3 h-6 w-6 text-neutral-400 group-hover:text-neutral-300\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 20H5a2 2 0 01-2-2V6a2 2 0 012-2h10a2 2 0 012 2v1m2 13a2 2 0 01-2-2V7m2 13a2 2 0 002-2V9.5a2.5 2.5 0 00-2.5-2.5H15\"></path></svg> Posts</a> <a href=\"/admin/tags\" class=\"flex items-center px-4 py-2 text-sm font-medium rounded-md text-neutral-300 hover:bg-neutral-700 hover:text-white group\"><svg class=\"mr-3 h-6 w-6 text-neutral-400 group-hover:text-neutral-300\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z\"></path></svg> Tags</a> <a href=\"/admin/settings\" class=\"flex items-center px-4 py-2 text-sm font-medium rounded-md text-neutral-300 hover:bg-neutral-700 hover:text-white group\"><svg class=\"mr-3 h-6 w-6 text-neutral-400 group-hover:text-neutral-300\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z\"></path> <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\"></path></svg> Settings</a></nav></div><div class=\"flex items-center px-4 py-3 bg-neutral-900\"><div class=\"flex-shrink-0\"><img class=\"h-8 w-8 rounded-full\" src=\"/static/images/avatar-placeholder.png\" alt=\"User avatar\"></div><div class=\"ml-3\"><p class=\"text-sm font-medium text-white\">Admin User</p><a href=\"/logout\" class=\"text-xs font-medium text-neutral-400 hover:text-neutral-300\">Sign out</a></div></div></nav><div class=\"md:pl-64 flex flex-col flex-1\"><div class=\"sticky top-0 z-10 md:hidden pl-1 pt-1 sm:pl-3 sm:pt-3 bg-neutral-100 dark:bg-neutral-800\"><button type=\"button\" class=\"inline-flex items-center justify-center p-2 rounded-md text-neutral-500 hover:text-neutral-900 hover:bg-neutral-100 dark:hover:text-neutral-100 dark:hover:bg-neutral-700 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-primary-500\" @click=\"sidebarOpen = true\"><span class=\"sr-only\">Open sidebar</span> <svg class=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 6h16M4 12h16M4 18h16\"></path></svg></button></div><main class=\"flex-1\"><div class=\"py-6\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ_7745c5c3_Var1.Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</div></main></div></div></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

================
File: web/layouts/admin.templ
================
// web/layouts/admin.templ
package layouts

templ Admin(data PageData) {
<!DOCTYPE html>
<html lang="en" class="h-full">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>{ data.Title }</title>
  <meta name="description" content={ data.Description } />
  // Stylesheets
  <link rel="stylesheet" href="/static/css/main.css" />
  <link href="https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400;500;600;700&display=swap"
    rel="stylesheet" />
  // Scripts
  <script src="https://unpkg.com/htmx.org@1.9.10"></script>
  <script defer src="https://unpkg.com/alpinejs@3.13.5/dist/cdn.min.js"></script>
</head>

<body class="h-full bg-neutral-50 dark:bg-neutral-900">
  <div x-data="{ sidebarOpen: false }" class="min-h-full">
    // Mobile backdrop
    <div x-show="sidebarOpen" class="fixed inset-0 z-40 bg-neutral-600 bg-opacity-75 md:hidden"
      x-transition:enter="transition-opacity ease-linear duration-300" x-transition:enter-start="opacity-0"
      x-transition:enter-end="opacity-100" x-transition:leave="transition-opacity ease-linear duration-300"
      x-transition:leave-start="opacity-100" x-transition:leave-end="opacity-0"></div>
    // Sidebar
    <aside
      class="fixed inset-y-0 left-0 z-50 w-64 bg-neutral-800 transform transition-transform duration-300 md:translate-x-0"
      :class="sidebarOpen ? 'translate-x-0' : '-translate-x-full'">
      <div class="flex items-center justify-between h-16 px-4 bg-neutral-900">
        <a href="/admin" class="text-xl font-bold text-white">Admin Panel</a>
        <button @click="sidebarOpen = false" class="md:hidden text-neutral-400 hover:text-white">
          <span class="sr-only">Close sidebar</span>
          <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
      <nav class="flex flex-col flex-1 p-4 space-y-1">
        <a href="/admin" class="px-3 py-2 text-neutral-100 rounded-md hover:bg-neutral-700">
          Dashboard
        </a>
        <a href="/admin/posts" class="px-3 py-2 text-neutral-100 rounded-md hover:bg-neutral-700">
          Blog Posts
        </a>
        <a href="/admin/tags" class="px-3 py-2 text-neutral-100 rounded-md hover:bg-neutral-700">
          Tags
        </a>
      </nav>
    </aside>
    // Main content
    <div class="md:pl-64">
      // Top header
      <div class="sticky top-0 z-10 bg-white dark:bg-neutral-900 shadow">
        <div class="flex items-center justify-between h-16 px-4">
          <button @click="sidebarOpen = true"
            class="md:hidden text-neutral-500 hover:text-neutral-900 dark:text-neutral-400 dark:hover:text-white">
            <span class="sr-only">Open sidebar</span>
            <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
            </svg>
          </button>
          <div class="flex items-center">
            <button type="button" x-data="{ darkMode: localStorage.theme === 'dark' }"
              @click="darkMode = !darkMode; localStorage.theme = darkMode ? 'dark' : 'light'; document.documentElement.classList.toggle('dark')"
              class="p-2 text-neutral-500 hover:text-neutral-900 dark:text-neutral-400 dark:hover:text-white">
              <span x-show="!darkMode" class="w-5 h-5">🌙</span>
              <span x-show="darkMode" class="w-5 h-5">☀️</span>
            </button>
            <a href="/"
              class="ml-4 text-sm text-neutral-500 hover:text-neutral-900 dark:text-neutral-400 dark:hover:text-white">
              View Site
            </a>
          </div>
        </div>
      </div>
      // Page content
      <main class="flex-1">
        { children... }
      </main>
    </div>
  </div>
</body>

</html>
}

================
File: web/layouts/base_templ.go
================
// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.731
// web/layouts/base.templ

package layouts

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import "blog-portfolio/web/components"

type PageData struct {
	Title       string
	Description string
}

func Base(data PageData) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<!doctype html><html lang=\"en\" class=\"h-full\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 string
		templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(data.Title)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `web/layouts/base.templ`, Line: 18, Col: 21}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</title><meta name=\"description\" content=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var3 string
		templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(data.Description)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `web/layouts/base.templ`, Line: 19, Col: 53}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\"><link rel=\"stylesheet\" href=\"/static/css/main.css\"><link href=\"https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400;500;600;700&amp;display=swap\" rel=\"stylesheet\"><script src=\"https://unpkg.com/htmx.org@1.9.10\"></script><script defer src=\"https://unpkg.com/alpinejs@3.13.5/dist/cdn.min.js\"></script></head><body class=\"h-full bg-neutral-50 dark:bg-neutral-900\"><div class=\"min-h-full\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = components.Navbar().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<main class=\"container mx-auto px-4 py-8\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ_7745c5c3_Var1.Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</main>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = components.Footer().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</div><script>\n    if (localStorage.theme === 'dark' || (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {\n      document.documentElement.classList.add('dark')\n    } else {\n      document.documentElement.classList.remove('dark')\n    }\n  </script></body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

================
File: web/layouts/base.templ
================
// web/layouts/base.templ
package layouts

import "blog-portfolio/web/components"

type PageData struct {
Title string
Description string
}

templ Base(data PageData) {
<!DOCTYPE html>
<html lang="en" class="h-full">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>{ data.Title }</title>
  <meta name="description" content={ data.Description } />
  // Stylesheets
  <link rel="stylesheet" href="/static/css/main.css" />
  <link href="https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400;500;600;700&display=swap"
    rel="stylesheet" />
  // Scripts
  <script src="https://unpkg.com/htmx.org@1.9.10"></script>
  <script defer src="https://unpkg.com/alpinejs@3.13.5/dist/cdn.min.js"></script>
</head>

<body class="h-full bg-neutral-50 dark:bg-neutral-900">
  <div class="min-h-full">
    @components.Navbar()
    <main class="container mx-auto px-4 py-8">
      { children... }
    </main>
    @components.Footer()
  </div>
  // Dark mode script
  <script>
    if (localStorage.theme === 'dark' || (!('theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
      document.documentElement.classList.add('dark')
    } else {
      document.documentElement.classList.remove('dark')
    }
  </script>
</body>

</html>
}

================
File: web/pages/blog_templ.go
================
// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.731
// web/pages/blog.templ

package pages

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"blog-portfolio/internal/models"
	"blog-portfolio/web/components"
	"blog-portfolio/web/layouts"
)

// Main blog listing page
func Blog(posts []*models.Post, currentPage int, activeTag string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var2 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12\"><h1 class=\"text-4xl font-bold text-neutral-900 dark:text-white mb-8\">Blog</h1>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if activeTag != "" {
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"mb-6\"><span class=\"text-sm text-neutral-600 dark:text-neutral-400\">Showing posts tagged with:</span> <span class=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-primary-100 text-primary-800 dark:bg-primary-800 dark:text-primary-100\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var3 string
				templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(activeTag)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `web/pages/blog.templ`, Line: 25, Col: 17}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</span></div>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = BlogPostList(posts).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = components.Pagination(currentPage, len(posts) == 10).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return templ_7745c5c3_Err
		})
		templ_7745c5c3_Err = layouts.Base(layouts.PageData{
			Title:       "Blog | My Portfolio",
			Description: "Read my latest blog posts about technology and software development",
		}).Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

// Blog post list component (used for both main page and HTMX updates)
func BlogPostList(posts []*models.Post) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var4 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var4 == nil {
			templ_7745c5c3_Var4 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"space-y-10\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		for _, post := range posts {
			templ_7745c5c3_Err = components.PostPreview(post).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		if len(posts) == 0 {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"text-center py-12\"><p class=\"text-neutral-600 dark:text-neutral-400\">No posts found.</p></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

// Individual blog post page
func BlogPost(post *models.Post) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var5 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var5 == nil {
			templ_7745c5c3_Var5 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var6 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<article class=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12\"><header class=\"mb-8\"><h1 class=\"text-4xl font-bold text-neutral-900 dark:text-white mb-4\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var7 string
			templ_7745c5c3_Var7, templ_7745c5c3_Err = templ.JoinStringErrs(post.Title)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `web/pages/blog.templ`, Line: 59, Col: 18}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var7))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</h1><div class=\"flex items-center space-x-4 text-sm text-neutral-600 dark:text-neutral-400\"><time datetime=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var8 string
			templ_7745c5c3_Var8, templ_7745c5c3_Err = templ.JoinStringErrs(post.PublishedAt.Format("2006-01-02"))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `web/pages/blog.templ`, Line: 62, Col: 60}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var8))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var9 string
			templ_7745c5c3_Var9, templ_7745c5c3_Err = templ.JoinStringErrs(post.PublishedAt.Format("January 2, 2006"))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `web/pages/blog.templ`, Line: 63, Col: 52}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var9))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</time> ")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if len(post.Tags) > 0 {
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"flex items-center space-x-2\"><span>•</span><div class=\"flex flex-wrap gap-2\">")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				for _, tag := range post.Tags {
					templ_7745c5c3_Err = components.Tag(tag).Render(ctx, templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err != nil {
						return templ_7745c5c3_Err
					}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</div></div>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</div></header>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			if post.CoverImage != "" {
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"mb-8\"><img src=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var10 string
				templ_7745c5c3_Var10, templ_7745c5c3_Err = templ.JoinStringErrs(post.CoverImage)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `web/pages/blog.templ`, Line: 79, Col: 30}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var10))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\" alt=\"")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				var templ_7745c5c3_Var11 string
				templ_7745c5c3_Var11, templ_7745c5c3_Err = templ.JoinStringErrs(post.Title)
				if templ_7745c5c3_Err != nil {
					return templ.Error{Err: templ_7745c5c3_Err, FileName: `web/pages/blog.templ`, Line: 79, Col: 49}
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var11))
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
				_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\" class=\"rounded-lg w-full object-cover\"></div>")
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"prose dark:prose-invert max-w-none\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var12 string
			templ_7745c5c3_Var12, templ_7745c5c3_Err = templ.JoinStringErrs(post.Content)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `web/pages/blog.templ`, Line: 84, Col: 18}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var12))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</div></article>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return templ_7745c5c3_Err
		})
		templ_7745c5c3_Err = layouts.Base(layouts.PageData{
			Title:       post.Title + " | Blog",
			Description: post.Description,
		}).Render(templ.WithChildren(ctx, templ_7745c5c3_Var6), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

================
File: web/pages/blog.templ
================
// web/pages/blog.templ
package pages

import (
"blog-portfolio/internal/models"
"blog-portfolio/web/components"
"blog-portfolio/web/layouts"
)

// Main blog listing page
templ Blog(posts []*models.Post, currentPage int, activeTag string) {
@layouts.Base(layouts.PageData{
Title: "Blog | My Portfolio",
Description: "Read my latest blog posts about technology and software development",
}) {
<div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
  <h1 class="text-4xl font-bold text-neutral-900 dark:text-white mb-8">Blog</h1>
  if activeTag != "" {
  <div class="mb-6">
    <span class="text-sm text-neutral-600 dark:text-neutral-400">
      Showing posts tagged with:
    </span>
    <span
      class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-primary-100 text-primary-800 dark:bg-primary-800 dark:text-primary-100">
      { activeTag }
    </span>
  </div>
  }
  @BlogPostList(posts)
  @components.Pagination(currentPage, len(posts) == 10)
  // Show pagination if we have full page
</div>
}
}

// Blog post list component (used for both main page and HTMX updates)
templ BlogPostList(posts []*models.Post) {
<div class="space-y-10">
  for _, post := range posts {
  @components.PostPreview(post)
  }
  if len(posts) == 0 {
  <div class="text-center py-12">
    <p class="text-neutral-600 dark:text-neutral-400">No posts found.</p>
  </div>
  }
</div>
}

// Individual blog post page
templ BlogPost(post *models.Post) {
@layouts.Base(layouts.PageData{
Title: post.Title + " | Blog",
Description: post.Description,
}) {
<article class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
  <header class="mb-8">
    <h1 class="text-4xl font-bold text-neutral-900 dark:text-white mb-4">
      { post.Title }
    </h1>
    <div class="flex items-center space-x-4 text-sm text-neutral-600 dark:text-neutral-400">
      <time datetime={ post.PublishedAt.Format("2006-01-02") }>
        { post.PublishedAt.Format("January 2, 2006") }
      </time>
      if len(post.Tags) > 0 {
      <div class="flex items-center space-x-2">
        <span>•</span>
        <div class="flex flex-wrap gap-2">
          for _, tag := range post.Tags {
          @components.Tag(tag)
          }
        </div>
      </div>
      }
    </div>
  </header>
  if post.CoverImage != "" {
  <div class="mb-8">
    <img src={ post.CoverImage } alt={ post.Title } class="rounded-lg w-full object-cover" />
  </div>
  }
  <div class="prose dark:prose-invert max-w-none">
    // We'll use a markdown renderer here
    { post.Content }
  </div>
</article>
}
}

================
File: web/pages/home_templ.go
================
// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.731
// web/pages/home.templ

package pages

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import "blog-portfolio/web/layouts"

func Home() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var2 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"max-w-4xl mx-auto\"><section class=\"text-center py-20\"><h1 class=\"text-4xl font-bold text-neutral-900 dark:text-white font-mono mb-4\">Welcome to My Corner of the Web</h1><p class=\"text-lg text-neutral-600 dark:text-neutral-300 mb-8\">I write about technology, development, and my journey as a software engineer.</p><div class=\"flex justify-center space-x-4\"><a href=\"/blog\" class=\"inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-md text-white bg-primary-500 hover:bg-primary-600\">Read Blog</a> <a href=\"/portfolio\" class=\"inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-md text-primary-700 bg-primary-100 hover:bg-primary-200\">View Portfolio</a></div></section><section class=\"mb-20\"><h2 class=\"text-2xl font-bold text-neutral-900 dark:text-white font-mono mb-6\">Latest Posts</h2><div class=\"grid gap-6 md:grid-cols-2\"><div class=\"bg-white dark:bg-neutral-800 p-6 rounded-lg shadow-sm\"><h3 class=\"text-lg font-semibold text-neutral-900 dark:text-white mb-2\">Sample Blog Post</h3><p class=\"text-neutral-600 dark:text-neutral-300 mb-4\">This is a preview of a blog post. We'll replace this with real content later.</p><a href=\"/blog/sample\" class=\"text-primary-500 hover:text-primary-600\">Read more →</a></div></div></section></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return templ_7745c5c3_Err
		})
		templ_7745c5c3_Err = layouts.Base(layouts.PageData{
			Title:       "Home | Blog & Portfolio",
			Description: "Welcome to my personal blog and portfolio",
		}).Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

================
File: web/pages/home.templ
================
// web/pages/home.templ
package pages

import "blog-portfolio/web/layouts"

templ Home() {
@layouts.Base(layouts.PageData{
Title: "Home | Blog & Portfolio",
Description: "Welcome to my personal blog and portfolio",
}) {
<div class="max-w-4xl mx-auto">
  <section class="text-center py-20">
    <h1 class="text-4xl font-bold text-neutral-900 dark:text-white font-mono mb-4">
      Welcome to My Corner of the Web
    </h1>
    <p class="text-lg text-neutral-600 dark:text-neutral-300 mb-8">
      I write about technology, development, and my journey as a software engineer.
    </p>
    <div class="flex justify-center space-x-4">
      <a href="/blog"
        class="inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-md text-white bg-primary-500 hover:bg-primary-600">
        Read Blog
      </a>
      <a href="/portfolio"
        class="inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-md text-primary-700 bg-primary-100 hover:bg-primary-200">
        View Portfolio
      </a>
    </div>
  </section>
  <section class="mb-20">
    <h2 class="text-2xl font-bold text-neutral-900 dark:text-white font-mono mb-6">
      Latest Posts
    </h2>
    <div class="grid gap-6 md:grid-cols-2">
      // We'll replace this with dynamic content later
      <div class="bg-white dark:bg-neutral-800 p-6 rounded-lg shadow-sm">
        <h3 class="text-lg font-semibold text-neutral-900 dark:text-white mb-2">
          Sample Blog Post
        </h3>
        <p class="text-neutral-600 dark:text-neutral-300 mb-4">
          This is a preview of a blog post. We'll replace this with real content later.
        </p>
        <a href="/blog/sample" class="text-primary-500 hover:text-primary-600">
          Read more →
        </a>
      </div>
    </div>
  </section>
</div>
}
}

================
File: web/pages/login_templ.go
================
// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.731
// web/pages/login.templ

package pages

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import "blog-portfolio/web/layouts"

func Login() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var2 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"min-h-screen flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8\"><div class=\"max-w-md w-full space-y-8\"><div><h2 class=\"mt-6 text-center text-3xl font-extrabold text-neutral-900 dark:text-white\">Sign in to your account</h2></div><form class=\"mt-8 space-y-6\" action=\"/login\" method=\"POST\"><div class=\"rounded-md shadow-sm -space-y-px\"><div><label for=\"username\" class=\"sr-only\">Username</label> <input id=\"username\" name=\"username\" type=\"text\" required class=\"appearance-none rounded-none relative block w-full px-3 py-2 border \n                                       border-neutral-300 dark:border-neutral-700 placeholder-neutral-500 \n                                       text-neutral-900 dark:text-white rounded-t-md focus:outline-none \n                                       focus:ring-primary-500 focus:border-primary-500 focus:z-10 sm:text-sm\n                                       dark:bg-neutral-800\" placeholder=\"Username\"></div><div><label for=\"password\" class=\"sr-only\">Password</label> <input id=\"password\" name=\"password\" type=\"password\" required class=\"appearance-none rounded-none relative block w-full px-3 py-2 border\n                                       border-neutral-300 dark:border-neutral-700 placeholder-neutral-500 \n                                       text-neutral-900 dark:text-white rounded-b-md focus:outline-none \n                                       focus:ring-primary-500 focus:border-primary-500 focus:z-10 sm:text-sm\n                                       dark:bg-neutral-800\" placeholder=\"Password\"></div></div><div><button type=\"submit\" class=\"group relative w-full flex justify-center py-2 px-4 border border-transparent \n                                   text-sm font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700 \n                                   focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500\">Sign in</button></div></form></div></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return templ_7745c5c3_Err
		})
		templ_7745c5c3_Err = layouts.Base(layouts.PageData{
			Title:       "Login | Admin",
			Description: "Login to access the admin panel",
		}).Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

================
File: web/pages/login.templ
================
// web/pages/login.templ
package pages

import "blog-portfolio/web/layouts"

templ Login() {
@layouts.Base(layouts.PageData{
Title: "Login | Admin",
Description: "Login to access the admin panel",
}) {
<div class="min-h-screen flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
  <div class="max-w-md w-full space-y-8">
    <div>
      <h2 class="mt-6 text-center text-3xl font-extrabold text-neutral-900 dark:text-white">
        Sign in to your account
      </h2>
    </div>
    <form class="mt-8 space-y-6" action="/login" method="POST">
      <div class="rounded-md shadow-sm -space-y-px">
        <div>
          <label for="username" class="sr-only">Username</label>
          <input id="username" name="username" type="text" required class="appearance-none rounded-none relative block w-full px-3 py-2 border 
                                       border-neutral-300 dark:border-neutral-700 placeholder-neutral-500 
                                       text-neutral-900 dark:text-white rounded-t-md focus:outline-none 
                                       focus:ring-primary-500 focus:border-primary-500 focus:z-10 sm:text-sm
                                       dark:bg-neutral-800" placeholder="Username" />
        </div>
        <div>
          <label for="password" class="sr-only">Password</label>
          <input id="password" name="password" type="password" required class="appearance-none rounded-none relative block w-full px-3 py-2 border
                                       border-neutral-300 dark:border-neutral-700 placeholder-neutral-500 
                                       text-neutral-900 dark:text-white rounded-b-md focus:outline-none 
                                       focus:ring-primary-500 focus:border-primary-500 focus:z-10 sm:text-sm
                                       dark:bg-neutral-800" placeholder="Password" />
        </div>
      </div>
      <div>
        <button type="submit" class="group relative w-full flex justify-center py-2 px-4 border border-transparent 
                                   text-sm font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700 
                                   focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500">
          Sign in
        </button>
      </div>
    </form>
  </div>
</div>
}
}

================
File: web/styles/input.css
================
/* web/styles/input.css */
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  html {
    font-family: 'JetBrains Mono', monospace;
  }
}

================
File: .air.toml
================
root = "."
tmp_dir = "tmp"

[build]
  cmd = "go build -o ./tmp/main ./cmd/server/"
  bin = "./tmp/main"
  delay = 1000
  exclude_dir = ["assets", "tmp", "vendor"]
  include_ext = ["go", "tpl", "tmpl", "templ", "html"]
  exclude_regex = ["_test\\.go"]

[screen]
  clear_on_rebuild = true

================
File: .gitignore
================
# Binaries for programs and plugins
*.exe
*.exe~
*.dll
*.so
*.dylib

# Test binary, built with go test -c
*.test

# Output of the go coverage tool, specifically when used with LiteIDE
*.out

# Dependency directories (remove the comment below to include it)
vendor/

# Go workspace file
go.work

# Environment variables
.env

# IDE specific files
.idea/
.vscode/
*.swp
*.swo

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Tailwind generated CSS
web/static/css/main.css

================
File: go.mod
================
module blog-portfolio

go 1.21.0

require (
	github.com/go-chi/chi/v5 v5.2.0
	github.com/go-chi/cors v1.2.1
)

require (
	github.com/a-h/templ v0.2.793
	github.com/golang-jwt/jwt/v5 v5.2.1
	github.com/mattn/go-sqlite3 v1.14.24
)

================
File: go.sum
================
github.com/a-h/templ v0.2.793 h1:Io+/ocnfGWYO4VHdR0zBbf39PQlnzVCVVD+wEEs6/qY=
github.com/a-h/templ v0.2.793/go.mod h1:lq48JXoUvuQrU0VThrK31yFwdRjTCnIE5bcPCM9IP1w=
github.com/go-chi/chi/v5 v5.2.0 h1:Aj1EtB0qR2Rdo2dG4O94RIU35w2lvQSj6BRA4+qwFL0=
github.com/go-chi/chi/v5 v5.2.0/go.mod h1:DslCQbL2OYiznFReuXYUmQ2hGd1aDpCnlMNITLSKoi8=
github.com/go-chi/cors v1.2.1 h1:xEC8UT3Rlp2QuWNEr4Fs/c2EAGVKBwy/1vHx3bppil4=
github.com/go-chi/cors v1.2.1/go.mod h1:sSbTewc+6wYHBBCW7ytsFSn836hqM7JxpglAy2Vzc58=
github.com/golang-jwt/jwt/v5 v5.2.1 h1:OuVbFODueb089Lh128TAcimifWaLhJwVflnrgM17wHk=
github.com/golang-jwt/jwt/v5 v5.2.1/go.mod h1:pqrtFR0X4osieyHYxtmOUWsAWrfe1Q5UVIyoH402zdk=
github.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=
github.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=
github.com/mattn/go-sqlite3 v1.14.24 h1:tpSp2G2KyMnnQu99ngJ47EIkWVmliIizyZBfPrBWDRM=
github.com/mattn/go-sqlite3 v1.14.24/go.mod h1:Uh1q+B4BYcTPb+yiD3kU8Ct7aC0hY9fxUwlHK0RXw+Y=

================
File: index.ts
================
console.log("Hello via Bun!");

================
File: makefile
================
# Go parameters
GOCMD=go
PORT?=8080  # Default port, can be overridden
GOBUILD=$(GOCMD) build
GORUN=$(GOCMD) run
GOCLEAN=$(GOCMD) clean
GOTEST=$(GOCMD) test
GOGET=$(GOCMD) get
GOMOD=$(GOCMD) mod
BINARY_NAME=blog-server
BINARY_UNIX=$(BINARY_NAME)_unix
MAIN_PATH=./cmd/server

# Templ parameters
TEMPL=templ
TEMPL_DIR=./web
TEMPL_FILES=$(shell find $(TEMPL_DIR) -name "*.templ")

# Tailwind parameters
NPX=npx
TAILWIND=tailwindcss
CSS_INPUT=./web/styles/input.css
CSS_OUTPUT=./web/static/css/main.css

# Air for hot reloading
AIR=air

.PHONY: all build clean test coverage deps air run generate-css watch-css generate-templ watch-templ dev install-tools help

all: clean deps build

# Build the application
build: generate-templ generate-css
	$(GOBUILD) -o $(BINARY_NAME) $(MAIN_PATH)

# Clean build files
clean:
	$(GOCLEAN)
	rm -f $(BINARY_NAME)
	rm -f $(BINARY_UNIX)
	rm -rf ./tmp

# Run tests
test:
	$(GOTEST) -v ./...

# Run tests with coverage
coverage:
	$(GOTEST) -coverprofile=coverage.out ./...
	$(GOCMD) tool cover -html=coverage.out

# Download all dependencies
deps:
	$(GOMOD) download
	$(GOMOD) tidy
	npm install

# Run with air (hot reloading)
air:
	$(AIR)

# Run the application
run: build
	PORT=$(PORT) ./$(BINARY_NAME)

# Run server on specific port
serve:
	PORT=$(PORT) $(GORUN) $(MAIN_PATH)/main.go

# Generate CSS
generate-css:
	$(NPX) $(TAILWIND) -i $(CSS_INPUT) -o $(CSS_OUTPUT) --minify

# Watch CSS changes
watch-css:
	$(NPX) $(TAILWIND) -i $(CSS_INPUT) -o $(CSS_OUTPUT) --watch

# Generate Templ files
generate-templ:
	$(TEMPL) generate

# Watch Templ files
watch-templ:
	$(TEMPL) generate --watch

# Development mode (run all watchers)
dev:
	make generate-templ
	make generate-css
	$(AIR)

# Install required tools
install-tools:
	$(GOGET) -u github.com/a-h/templ/cmd/templ
	$(GOGET) -u github.com/cosmtrek/air
	npm install -D tailwindcss
	npm install -D @tailwindcss/typography
	npm install -D @tailwindcss/forms
	npm install alpinejs
	npm install htmx.org

# Create a new blog post template
new-post:
	@read -p "Enter post title: " title; \
	filename=`echo $$title | tr '[:upper:]' '[:lower:]' | tr ' ' '-'`; \
	date=`date +%Y-%m-%d`; \
	echo "Creating new post: $$filename"; \
	echo "---\ntitle: $$title\ndate: $$date\ndraft: true\n---\n\n" > ./content/posts/$$filename.md

# Build for production
build-prod: generate-templ
	CGO_ENABLED=0 GOOS=linux $(GOBUILD) -o $(BINARY_UNIX) -v $(MAIN_PATH)

# Docker commands
docker-build:
	docker build -t $(BINARY_NAME) .

docker-run:
	docker run -p 8080:8080 $(BINARY_NAME)

# Database commands
.PHONY: db-setup db-migrate db-rollback

# Setup database
db-setup:
	mkdir -p data migrations

# Run migrations
db-migrate:
	@echo "Running database migrations..."
	@go run cmd/server/main.go migrate

# Rollback last migration
db-rollback:
	@echo "Rolling back last migration..."
	@go run cmd/server/main.go rollback
help:
	@echo "Available commands:"
	@echo "  make build          - Build the application"
	@echo "  make clean          - Clean build files"
	@echo "  make test           - Run tests"
	@echo "  make coverage       - Run tests with coverage"
	@echo "  make deps           - Download Go dependencies"
	@echo "  make air            - Run with hot reloading"
	@echo "  make run            - Run the application"
	@echo "  make generate-css   - Generate CSS files"
	@echo "  make watch-css      - Watch CSS changes"
	@echo "  make generate-templ - Generate Templ files"
	@echo "  make watch-templ    - Watch Templ files"
	@echo "  make dev            - Run in development mode"
	@echo "  make install-tools  - Install required tools"
	@echo "  make new-post      - Create a new blog post"
	@echo "  make build-prod    - Build for production"
	@echo "  make docker-build  - Build Docker image"
	@echo "  make docker-run    - Run Docker container"

================
File: package.json
================
{
  "name": "blog-portfolio",
  "module": "index.ts",
  "type": "module",
  "devDependencies": {
    "@tailwindcss/forms": "^0.5.9",
    "@tailwindcss/typography": "^0.5.15",
    "@types/bun": "latest",
    "alpinejs": "^3.14.8",
    "htmx.org": "^1.9.12",
    "tailwindcss": "^3.4.17"
  },
  "peerDependencies": {
    "typescript": "^5.0.0"
  }
}

================
File: README.md
================
# blog-portfolio

A modern blog and portfolio website built with Go, Templ, Tailwind CSS, HTMX, and Alpine.js.

## Tech Stack

- Go
- Templ
- Tailwind CSS
- HTMX
- Pines UI
- Alpine.js

## Getting Started

1. Clone the repository
2. Install dependencies
3. Run the development server

## Development

```bash
# Run the development server
go run cmd/server/main.go
```

## License

[MIT](LICENSE)

================
File: tailwind.config.js
================
// tailwind.config.js
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./web/**/*.{html,js,templ}",
  ],
  theme: {
    extend: {
      colors: {
        primary: {
          50: '#f0f9ff',  // Pastel blue
          100: '#e0f2fe',
          200: '#bae6fd',
          300: '#7dd3fc',
          400: '#38bdf8',
          500: '#0ea5e9',
        },
        secondary: {
          50: '#fdf4ff',  // Pastel purple
          100: '#fae8ff',
          200: '#f5d0fe',
          300: '#f0abfc',
          400: '#e879f9',
          500: '#d946ef',
        },
        accent: {
          50: '#fff1f2',  // Pastel pink
          100: '#ffe4e6',
          200: '#fecdd3',
          300: '#fda4af',
          400: '#fb7185',
          500: '#f43f5e',
        },
        neutral: {
          50: '#fafafa',
          100: '#f5f5f5',
          200: '#e5e5e5',
          300: '#d4d4d4',
          400: '#a3a3a3',
          500: '#737373',
          600: '#525252',
          700: '#404040',
          800: '#262626',
          900: '#171717',
        }
      },
      fontFamily: {
        mono: ['JetBrains Mono', 'monospace'],
        sans: ['Inter', 'sans-serif'],
      },
      typography: {
        DEFAULT: {
          css: {
            maxWidth: '65ch',
            color: '#404040',
            a: {
              color: '#0ea5e9',
              '&:hover': {
                color: '#38bdf8',
              },
            },
          },
        },
      },
    },
  },
  plugins: [
    require('@tailwindcss/typography'),
    require('@tailwindcss/forms'),
  ],
  darkMode: 'class',
}

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "lib": ["ESNext"],
    "target": "ESNext",
    "module": "ESNext",
    "moduleDetection": "force",
    "jsx": "react-jsx",
    "allowJs": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "noEmit": true,

    /* Linting */
    "skipLibCheck": true,
    "strict": true,
    "noFallthroughCasesInSwitch": true,
    "forceConsistentCasingInFileNames": true
  }
}
